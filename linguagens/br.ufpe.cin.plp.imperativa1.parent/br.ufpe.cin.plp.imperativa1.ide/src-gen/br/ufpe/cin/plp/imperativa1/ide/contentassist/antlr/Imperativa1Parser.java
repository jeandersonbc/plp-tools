/*
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.ide.contentassist.antlr;

import br.ufpe.cin.plp.imperativa1.ide.contentassist.antlr.internal.InternalImperativa1Parser;
import br.ufpe.cin.plp.imperativa1.services.Imperativa1GrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class Imperativa1Parser extends AbstractContentAssistParser {

	@Inject
	private Imperativa1GrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalImperativa1Parser createParser() {
		InternalImperativa1Parser result = new InternalImperativa1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComandoAccess().getAlternatives(), "rule__Comando__Alternatives");
					put(grammarAccess.getIOAccess().getAlternatives(), "rule__IO__Alternatives");
					put(grammarAccess.getPIdAccess().getAlternatives_1(), "rule__PId__Alternatives_1");
					put(grammarAccess.getValorAccess().getAlternatives(), "rule__Valor__Alternatives");
					put(grammarAccess.getExpPrimariaAccess().getAlternatives(), "rule__ExpPrimaria__Alternatives");
					put(grammarAccess.getExpUnariaAccess().getAlternatives(), "rule__ExpUnaria__Alternatives");
					put(grammarAccess.getExpBinariaAccess().getAlternatives(), "rule__ExpBinaria__Alternatives");
					put(grammarAccess.getExpressaoAccess().getAlternatives(), "rule__Expressao__Alternatives");
					put(grammarAccess.getComandoSimplesAccess().getAlternatives(), "rule__ComandoSimples__Alternatives");
					put(grammarAccess.getDeclaracaoAccess().getAlternatives(), "rule__Declaracao__Alternatives");
					put(grammarAccess.getSequenciaComandoAccess().getGroup(), "rule__SequenciaComando__Group__0");
					put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getAtribuicaoAccess().getGroup(), "rule__Atribuicao__Group__0");
					put(grammarAccess.getPIdAccess().getGroup(), "rule__PId__Group__0");
					put(grammarAccess.getExpMenosAccess().getGroup(), "rule__ExpMenos__Group__0");
					put(grammarAccess.getExpNotAccess().getGroup(), "rule__ExpNot__Group__0");
					put(grammarAccess.getExpLenghtAccess().getGroup(), "rule__ExpLenght__Group__0");
					put(grammarAccess.getExpPrimariaAccess().getGroup_2(), "rule__ExpPrimaria__Group_2__0");
					put(grammarAccess.getExpSomaAccess().getGroup(), "rule__ExpSoma__Group__0");
					put(grammarAccess.getExpSubAccess().getGroup(), "rule__ExpSub__Group__0");
					put(grammarAccess.getExpAndAccess().getGroup(), "rule__ExpAnd__Group__0");
					put(grammarAccess.getExpOrAccess().getGroup(), "rule__ExpOr__Group__0");
					put(grammarAccess.getExpEqualsAccess().getGroup(), "rule__ExpEquals__Group__0");
					put(grammarAccess.getExpConcatAccess().getGroup(), "rule__ExpConcat__Group__0");
					put(grammarAccess.getComandoSimplesAccess().getGroup_6(), "rule__ComandoSimples__Group_6__0");
					put(grammarAccess.getComandoDeclaracaoAccess().getGroup(), "rule__ComandoDeclaracao__Group__0");
					put(grammarAccess.getDeclaracaoAccess().getGroup_2(), "rule__Declaracao__Group_2__0");
					put(grammarAccess.getDeclaracaoCompostaAccess().getGroup(), "rule__DeclaracaoComposta__Group__0");
					put(grammarAccess.getDeclaracaoVariavelAccess().getGroup(), "rule__DeclaracaoVariavel__Group__0");
					put(grammarAccess.getModelAccess().getComandosAssignment(), "rule__Model__ComandosAssignment");
					put(grammarAccess.getComandoAccess().getSequenciaComandoAssignment_0(), "rule__Comando__SequenciaComandoAssignment_0");
					put(grammarAccess.getComandoAccess().getComandoSimplesAssignment_1(), "rule__Comando__ComandoSimplesAssignment_1");
					put(grammarAccess.getSequenciaComandoAccess().getComandoSimplesAssignment_0(), "rule__SequenciaComando__ComandoSimplesAssignment_0");
					put(grammarAccess.getSequenciaComandoAccess().getComandoAssignment_2(), "rule__SequenciaComando__ComandoAssignment_2");
					put(grammarAccess.getIOAccess().getReadAssignment_0(), "rule__IO__ReadAssignment_0");
					put(grammarAccess.getIOAccess().getWriteAssignment_1(), "rule__IO__WriteAssignment_1");
					put(grammarAccess.getReadAccess().getPidAssignment_2(), "rule__Read__PidAssignment_2");
					put(grammarAccess.getWriteAccess().getExpressaoAssignment_2(), "rule__Write__ExpressaoAssignment_2");
					put(grammarAccess.getIfThenElseAccess().getExpressaoAssignment_1(), "rule__IfThenElse__ExpressaoAssignment_1");
					put(grammarAccess.getIfThenElseAccess().getComandoAssignment_3(), "rule__IfThenElse__ComandoAssignment_3");
					put(grammarAccess.getIfThenElseAccess().getComandoAssignment_5(), "rule__IfThenElse__ComandoAssignment_5");
					put(grammarAccess.getWhileAccess().getExpressaoAssignment_1(), "rule__While__ExpressaoAssignment_1");
					put(grammarAccess.getWhileAccess().getComandoAssignment_3(), "rule__While__ComandoAssignment_3");
					put(grammarAccess.getSkipAccess().getSkipAssignment(), "rule__Skip__SkipAssignment");
					put(grammarAccess.getAtribuicaoAccess().getPidAssignment_0(), "rule__Atribuicao__PidAssignment_0");
					put(grammarAccess.getAtribuicaoAccess().getExpressaoAssignment_2(), "rule__Atribuicao__ExpressaoAssignment_2");
					put(grammarAccess.getValorAccess().getIntTypeAssignment_0(), "rule__Valor__IntTypeAssignment_0");
					put(grammarAccess.getValorAccess().getStringTypeAssignment_1(), "rule__Valor__StringTypeAssignment_1");
					put(grammarAccess.getValorAccess().getBoolTypeAssignment_2(), "rule__Valor__BoolTypeAssignment_2");
					put(grammarAccess.getExpMenosAccess().getMenosExpressaoAssignment_1(), "rule__ExpMenos__MenosExpressaoAssignment_1");
					put(grammarAccess.getExpNotAccess().getNotExpressaoAssignment_1(), "rule__ExpNot__NotExpressaoAssignment_1");
					put(grammarAccess.getExpLenghtAccess().getLengthExpressaoAssignment_1(), "rule__ExpLenght__LengthExpressaoAssignment_1");
					put(grammarAccess.getExpPrimariaAccess().getPidAssignment_0(), "rule__ExpPrimaria__PidAssignment_0");
					put(grammarAccess.getExpPrimariaAccess().getValorAssignment_1(), "rule__ExpPrimaria__ValorAssignment_1");
					put(grammarAccess.getExpPrimariaAccess().getExpressaoAssignment_2_1(), "rule__ExpPrimaria__ExpressaoAssignment_2_1");
					put(grammarAccess.getExpUnariaAccess().getMenosExpressaoAssignment_0(), "rule__ExpUnaria__MenosExpressaoAssignment_0");
					put(grammarAccess.getExpUnariaAccess().getNotExpressaoAssignment_1(), "rule__ExpUnaria__NotExpressaoAssignment_1");
					put(grammarAccess.getExpUnariaAccess().getLengthExpressaoAssignment_2(), "rule__ExpUnaria__LengthExpressaoAssignment_2");
					put(grammarAccess.getExpBinariaAccess().getSomaExpressaoAssignment_0(), "rule__ExpBinaria__SomaExpressaoAssignment_0");
					put(grammarAccess.getExpBinariaAccess().getSubExpressaoAssignment_1(), "rule__ExpBinaria__SubExpressaoAssignment_1");
					put(grammarAccess.getExpBinariaAccess().getOrExpressaoAssignment_2(), "rule__ExpBinaria__OrExpressaoAssignment_2");
					put(grammarAccess.getExpBinariaAccess().getAndExpressaoAssignment_3(), "rule__ExpBinaria__AndExpressaoAssignment_3");
					put(grammarAccess.getExpBinariaAccess().getEqualsExpressaoAssignment_4(), "rule__ExpBinaria__EqualsExpressaoAssignment_4");
					put(grammarAccess.getExpBinariaAccess().getConcatExpressaoAssignment_5(), "rule__ExpBinaria__ConcatExpressaoAssignment_5");
					put(grammarAccess.getExpSomaAccess().getValorAssignment_0(), "rule__ExpSoma__ValorAssignment_0");
					put(grammarAccess.getExpSomaAccess().getExpressaoAssignment_2(), "rule__ExpSoma__ExpressaoAssignment_2");
					put(grammarAccess.getExpSubAccess().getValorAssignment_0(), "rule__ExpSub__ValorAssignment_0");
					put(grammarAccess.getExpSubAccess().getExpressaoAssignment_2(), "rule__ExpSub__ExpressaoAssignment_2");
					put(grammarAccess.getExpAndAccess().getValorAssignment_0(), "rule__ExpAnd__ValorAssignment_0");
					put(grammarAccess.getExpAndAccess().getExpressaoAssignment_2(), "rule__ExpAnd__ExpressaoAssignment_2");
					put(grammarAccess.getExpOrAccess().getValorAssignment_0(), "rule__ExpOr__ValorAssignment_0");
					put(grammarAccess.getExpOrAccess().getExpressaoAssignment_2(), "rule__ExpOr__ExpressaoAssignment_2");
					put(grammarAccess.getExpEqualsAccess().getValorAssignment_0(), "rule__ExpEquals__ValorAssignment_0");
					put(grammarAccess.getExpEqualsAccess().getExpressaoAssignment_2(), "rule__ExpEquals__ExpressaoAssignment_2");
					put(grammarAccess.getExpConcatAccess().getValorAssignment_0(), "rule__ExpConcat__ValorAssignment_0");
					put(grammarAccess.getExpConcatAccess().getExpressaoAssignment_2(), "rule__ExpConcat__ExpressaoAssignment_2");
					put(grammarAccess.getExpressaoAccess().getExpUnariaAssignment_0(), "rule__Expressao__ExpUnariaAssignment_0");
					put(grammarAccess.getExpressaoAccess().getExpPrimariaAssignment_1(), "rule__Expressao__ExpPrimariaAssignment_1");
					put(grammarAccess.getExpressaoAccess().getExpBinariaAssignment_2(), "rule__Expressao__ExpBinariaAssignment_2");
					put(grammarAccess.getComandoSimplesAccess().getSkipAssignment_0(), "rule__ComandoSimples__SkipAssignment_0");
					put(grammarAccess.getComandoSimplesAccess().getAtribuicaoAssignment_1(), "rule__ComandoSimples__AtribuicaoAssignment_1");
					put(grammarAccess.getComandoSimplesAccess().getComandoDeclaracaoAssignment_2(), "rule__ComandoSimples__ComandoDeclaracaoAssignment_2");
					put(grammarAccess.getComandoSimplesAccess().getWhileAssignment_3(), "rule__ComandoSimples__WhileAssignment_3");
					put(grammarAccess.getComandoSimplesAccess().getIfThenElseAssignment_4(), "rule__ComandoSimples__IfThenElseAssignment_4");
					put(grammarAccess.getComandoSimplesAccess().getIoAssignment_5(), "rule__ComandoSimples__IoAssignment_5");
					put(grammarAccess.getComandoSimplesAccess().getComandoAssignment_6_1(), "rule__ComandoSimples__ComandoAssignment_6_1");
					put(grammarAccess.getComandoDeclaracaoAccess().getDeclaracaoAssignment_1(), "rule__ComandoDeclaracao__DeclaracaoAssignment_1");
					put(grammarAccess.getComandoDeclaracaoAccess().getComandoAssignment_3(), "rule__ComandoDeclaracao__ComandoAssignment_3");
					put(grammarAccess.getDeclaracaoAccess().getDecCompostaAssignment_0(), "rule__Declaracao__DecCompostaAssignment_0");
					put(grammarAccess.getDeclaracaoAccess().getDecVariavelAssignment_1(), "rule__Declaracao__DecVariavelAssignment_1");
					put(grammarAccess.getDeclaracaoAccess().getDeclaracaoAssignment_2_1(), "rule__Declaracao__DeclaracaoAssignment_2_1");
					put(grammarAccess.getDeclaracaoCompostaAccess().getDecVariavelAssignment_0(), "rule__DeclaracaoComposta__DecVariavelAssignment_0");
					put(grammarAccess.getDeclaracaoCompostaAccess().getDeclaracaoAssignment_2(), "rule__DeclaracaoComposta__DeclaracaoAssignment_2");
					put(grammarAccess.getDeclaracaoVariavelAccess().getPidAssignment_1(), "rule__DeclaracaoVariavel__PidAssignment_1");
					put(grammarAccess.getDeclaracaoVariavelAccess().getExpressaoAssignment_3(), "rule__DeclaracaoVariavel__ExpressaoAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalImperativa1Parser typedParser = (InternalImperativa1Parser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Imperativa1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Imperativa1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
