/**
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.imperativa1.util;

import br.ufpe.cin.plp.imperativa1.imperativa1.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufpe.cin.plp.imperativa1.imperativa1.Imperativa1Package
 * @generated
 */
public class Imperativa1Switch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Imperativa1Package modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Imperativa1Switch()
  {
    if (modelPackage == null)
    {
      modelPackage = Imperativa1Package.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case Imperativa1Package.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.COMANDO:
      {
        Comando comando = (Comando)theEObject;
        T result = caseComando(comando);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.SEQUENCIA_COMANDO:
      {
        SequenciaComando sequenciaComando = (SequenciaComando)theEObject;
        T result = caseSequenciaComando(sequenciaComando);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.IO:
      {
        IO io = (IO)theEObject;
        T result = caseIO(io);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.READ:
      {
        Read read = (Read)theEObject;
        T result = caseRead(read);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.WRITE:
      {
        Write write = (Write)theEObject;
        T result = caseWrite(write);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.IF_THEN_ELSE:
      {
        IfThenElse ifThenElse = (IfThenElse)theEObject;
        T result = caseIfThenElse(ifThenElse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.WHILE:
      {
        While while_ = (While)theEObject;
        T result = caseWhile(while_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.SKIP:
      {
        Skip skip = (Skip)theEObject;
        T result = caseSkip(skip);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.ATRIBUICAO:
      {
        Atribuicao atribuicao = (Atribuicao)theEObject;
        T result = caseAtribuicao(atribuicao);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.VALOR:
      {
        Valor valor = (Valor)theEObject;
        T result = caseValor(valor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_MENOS:
      {
        ExpMenos expMenos = (ExpMenos)theEObject;
        T result = caseExpMenos(expMenos);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_NOT:
      {
        ExpNot expNot = (ExpNot)theEObject;
        T result = caseExpNot(expNot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_LENGHT:
      {
        ExpLenght expLenght = (ExpLenght)theEObject;
        T result = caseExpLenght(expLenght);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_PRIMARIA:
      {
        ExpPrimaria expPrimaria = (ExpPrimaria)theEObject;
        T result = caseExpPrimaria(expPrimaria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_UNARIA:
      {
        ExpUnaria expUnaria = (ExpUnaria)theEObject;
        T result = caseExpUnaria(expUnaria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_BINARIA:
      {
        ExpBinaria expBinaria = (ExpBinaria)theEObject;
        T result = caseExpBinaria(expBinaria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_SOMA:
      {
        ExpSoma expSoma = (ExpSoma)theEObject;
        T result = caseExpSoma(expSoma);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_SUB:
      {
        ExpSub expSub = (ExpSub)theEObject;
        T result = caseExpSub(expSub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_AND:
      {
        ExpAnd expAnd = (ExpAnd)theEObject;
        T result = caseExpAnd(expAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_OR:
      {
        ExpOr expOr = (ExpOr)theEObject;
        T result = caseExpOr(expOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_EQUALS:
      {
        ExpEquals expEquals = (ExpEquals)theEObject;
        T result = caseExpEquals(expEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXP_CONCAT:
      {
        ExpConcat expConcat = (ExpConcat)theEObject;
        T result = caseExpConcat(expConcat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.EXPRESSAO:
      {
        Expressao expressao = (Expressao)theEObject;
        T result = caseExpressao(expressao);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.COMANDO_SIMPLES:
      {
        ComandoSimples comandoSimples = (ComandoSimples)theEObject;
        T result = caseComandoSimples(comandoSimples);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.COMANDO_DECLARACAO:
      {
        ComandoDeclaracao comandoDeclaracao = (ComandoDeclaracao)theEObject;
        T result = caseComandoDeclaracao(comandoDeclaracao);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.DECLARACAO:
      {
        Declaracao declaracao = (Declaracao)theEObject;
        T result = caseDeclaracao(declaracao);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.DECLARACAO_COMPOSTA:
      {
        DeclaracaoComposta declaracaoComposta = (DeclaracaoComposta)theEObject;
        T result = caseDeclaracaoComposta(declaracaoComposta);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Imperativa1Package.DECLARACAO_VARIAVEL:
      {
        DeclaracaoVariavel declaracaoVariavel = (DeclaracaoVariavel)theEObject;
        T result = caseDeclaracaoVariavel(declaracaoVariavel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comando</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comando</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComando(Comando object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequencia Comando</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequencia Comando</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenciaComando(SequenciaComando object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIO(IO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead(Read object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Write</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Write</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrite(Write object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Then Else</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Then Else</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfThenElse(IfThenElse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhile(While object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Skip</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Skip</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSkip(Skip object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atribuicao</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atribuicao</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtribuicao(Atribuicao object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Valor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Valor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValor(Valor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Menos</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Menos</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpMenos(ExpMenos object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpNot(ExpNot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Lenght</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Lenght</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpLenght(ExpLenght object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Primaria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Primaria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpPrimaria(ExpPrimaria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Unaria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Unaria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpUnaria(ExpUnaria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Binaria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Binaria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpBinaria(ExpBinaria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Soma</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Soma</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpSoma(ExpSoma object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpSub(ExpSub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpAnd(ExpAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpOr(ExpOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpEquals(ExpEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Concat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Concat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpConcat(ExpConcat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expressao</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expressao</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressao(Expressao object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comando Simples</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comando Simples</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComandoSimples(ComandoSimples object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comando Declaracao</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comando Declaracao</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComandoDeclaracao(ComandoDeclaracao object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaracao</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaracao</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaracao(Declaracao object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaracao Composta</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaracao Composta</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaracaoComposta(DeclaracaoComposta object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaracao Variavel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaracao Variavel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaracaoVariavel(DeclaracaoVariavel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //Imperativa1Switch
