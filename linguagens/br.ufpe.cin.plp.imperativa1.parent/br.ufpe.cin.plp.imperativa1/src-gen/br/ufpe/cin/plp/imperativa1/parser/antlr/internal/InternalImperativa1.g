/*
 * generated by Xtext 2.9.2
 */
grammar InternalImperativa1;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufpe.cin.plp.imperativa1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufpe.cin.plp.imperativa1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufpe.cin.plp.imperativa1.services.Imperativa1GrammarAccess;

}

@parser::members {

 	private Imperativa1GrammarAccess grammarAccess;

    public InternalImperativa1Parser(TokenStream input, Imperativa1GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected Imperativa1GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getComandosComandoParserRuleCall_0());
			}
			lv_comandos_0_0=ruleComando
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"comandos",
					lv_comandos_0_0,
					"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleComando
entryRuleComando returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComandoRule()); }
	iv_ruleComando=ruleComando
	{ $current=$iv_ruleComando.current; }
	EOF;

// Rule Comando
ruleComando returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleSequenciaComando
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getComandoAccess().getSequenciaComandoSequenciaComandoParserRuleCall_0_0());
				}
				lv_sequenciaComando_0_0=ruleSequenciaComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoRule());
					}
					set(
						$current,
						"sequenciaComando",
						lv_sequenciaComando_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.SequenciaComando");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoAccess().getComandoSimplesComandoSimplesParserRuleCall_1_0());
				}
				lv_comandoSimples_1_0=ruleComandoSimples
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoRule());
					}
					set(
						$current,
						"comandoSimples",
						lv_comandoSimples_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ComandoSimples");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSequenciaComando
entryRuleSequenciaComando returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenciaComandoRule()); }
	iv_ruleSequenciaComando=ruleSequenciaComando
	{ $current=$iv_ruleSequenciaComando.current; }
	EOF;

// Rule SequenciaComando
ruleSequenciaComando returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenciaComandoAccess().getComandoSimplesComandoSimplesParserRuleCall_0_0());
				}
				lv_comandoSimples_0_0=ruleComandoSimples
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenciaComandoRule());
					}
					set(
						$current,
						"comandoSimples",
						lv_comandoSimples_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ComandoSimples");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenciaComandoAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenciaComandoAccess().getComandoComandoParserRuleCall_2_0());
				}
				lv_comando_2_0=ruleComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenciaComandoRule());
					}
					set(
						$current,
						"comando",
						lv_comando_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIO
entryRuleIO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIORule()); }
	iv_ruleIO=ruleIO
	{ $current=$iv_ruleIO.current; }
	EOF;

// Rule IO
ruleIO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIOAccess().getReadReadParserRuleCall_0_0());
				}
				lv_read_0_0=ruleRead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIORule());
					}
					set(
						$current,
						"read",
						lv_read_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Read");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIOAccess().getWriteWriteParserRuleCall_1_0());
				}
				lv_write_1_0=ruleWrite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIORule());
					}
					set(
						$current,
						"write",
						lv_write_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Write");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadRule()); }
	iv_ruleRead=ruleRead
	{ $current=$iv_ruleRead.current; }
	EOF;

// Rule Read
ruleRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadAccess().getReadKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getReadAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadAccess().getPidPIdParserRuleCall_2_0());
				}
				lv_pid_2_0=rulePId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadRule());
					}
					set(
						$current,
						"pid",
						lv_pid_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.PId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getReadAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWrite
entryRuleWrite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteRule()); }
	iv_ruleWrite=ruleWrite
	{ $current=$iv_ruleWrite.current; }
	EOF;

// Rule Write
ruleWrite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='write'
		{
			newLeafNode(otherlv_0, grammarAccess.getWriteAccess().getWriteKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWriteAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWriteAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	iv_ruleIfThenElse=ruleIfThenElse
	{ $current=$iv_ruleIfThenElse.current; }
	EOF;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getExpressaoExpressaoParserRuleCall_1_0());
				}
				lv_expressao_1_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfThenElseAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getComandoComandoParserRuleCall_3_0());
				}
				lv_comando_3_0=ruleComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"comando",
						lv_comando_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfThenElseAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseAccess().getComandoComandoParserRuleCall_5_0());
				}
				lv_comando_5_0=ruleComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseRule());
					}
					set(
						$current,
						"comando",
						lv_comando_5_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getExpressaoExpressaoParserRuleCall_1_0());
				}
				lv_expressao_1_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getComandoComandoParserRuleCall_3_0());
				}
				lv_comando_3_0=ruleComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"comando",
						lv_comando_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSkip
entryRuleSkip returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkipRule()); }
	iv_ruleSkip=ruleSkip
	{ $current=$iv_ruleSkip.current; }
	EOF;

// Rule Skip
ruleSkip returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_skip_0_0='skip'
			{
				newLeafNode(lv_skip_0_0, grammarAccess.getSkipAccess().getSkipSkipKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSkipRule());
				}
				setWithLastConsumed($current, "skip", lv_skip_0_0, "skip");
			}
		)
	)
;

// Entry rule entryRuleAtribuicao
entryRuleAtribuicao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtribuicaoRule()); }
	iv_ruleAtribuicao=ruleAtribuicao
	{ $current=$iv_ruleAtribuicao.current; }
	EOF;

// Rule Atribuicao
ruleAtribuicao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtribuicaoAccess().getPidPIdParserRuleCall_0_0());
				}
				lv_pid_0_0=rulePId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtribuicaoRule());
					}
					set(
						$current,
						"pid",
						lv_pid_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.PId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAtribuicaoAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtribuicaoAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtribuicaoRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePId
entryRulePId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPIdRule()); }
	iv_rulePId=rulePId
	{ $current=$iv_rulePId.current.getText(); }
	EOF;

// Rule PId
rulePId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VALORSTRING_0=RULE_VALORSTRING
		{
			$current.merge(this_VALORSTRING_0);
		}
		{
			newLeafNode(this_VALORSTRING_0, grammarAccess.getPIdAccess().getVALORSTRINGTerminalRuleCall_0());
		}
		(
			this_VALORSTRING_1=RULE_VALORSTRING
			{
				$current.merge(this_VALORSTRING_1);
			}
			{
				newLeafNode(this_VALORSTRING_1, grammarAccess.getPIdAccess().getVALORSTRINGTerminalRuleCall_1_0());
			}
			    |
			this_VALORINTEIRO_2=RULE_VALORINTEIRO
			{
				$current.merge(this_VALORINTEIRO_2);
			}
			{
				newLeafNode(this_VALORINTEIRO_2, grammarAccess.getPIdAccess().getVALORINTEIROTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleValor
entryRuleValor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValorRule()); }
	iv_ruleValor=ruleValor
	{ $current=$iv_ruleValor.current; }
	EOF;

// Rule Valor
ruleValor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_intType_0_0=RULE_VALORINTEIRO
				{
					newLeafNode(lv_intType_0_0, grammarAccess.getValorAccess().getIntTypeVALORINTEIROTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValorRule());
					}
					setWithLastConsumed(
						$current,
						"intType",
						lv_intType_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.VALORINTEIRO");
				}
			)
		)
		    |
		(
			(
				lv_stringType_1_0=RULE_VALORSTRING
				{
					newLeafNode(lv_stringType_1_0, grammarAccess.getValorAccess().getStringTypeVALORSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValorRule());
					}
					setWithLastConsumed(
						$current,
						"stringType",
						lv_stringType_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.VALORSTRING");
				}
			)
		)
		    |
		(
			(
				lv_boolType_2_0=RULE_VALORBOOLEANO
				{
					newLeafNode(lv_boolType_2_0, grammarAccess.getValorAccess().getBoolTypeVALORBOOLEANOTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValorRule());
					}
					setWithLastConsumed(
						$current,
						"boolType",
						lv_boolType_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.VALORBOOLEANO");
				}
			)
		)
	)
;

// Entry rule entryRuleExpMenos
entryRuleExpMenos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpMenosRule()); }
	iv_ruleExpMenos=ruleExpMenos
	{ $current=$iv_ruleExpMenos.current; }
	EOF;

// Rule ExpMenos
ruleExpMenos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpMenosAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpMenosAccess().getMenosExpressaoExpressaoParserRuleCall_1_0());
				}
				lv_menosExpressao_1_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpMenosRule());
					}
					set(
						$current,
						"menosExpressao",
						lv_menosExpressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpNot
entryRuleExpNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpNotRule()); }
	iv_ruleExpNot=ruleExpNot
	{ $current=$iv_ruleExpNot.current; }
	EOF;

// Rule ExpNot
ruleExpNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpNotAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpNotAccess().getNotExpressaoExpressaoParserRuleCall_1_0());
				}
				lv_notExpressao_1_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpNotRule());
					}
					set(
						$current,
						"notExpressao",
						lv_notExpressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpLenght
entryRuleExpLenght returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpLenghtRule()); }
	iv_ruleExpLenght=ruleExpLenght
	{ $current=$iv_ruleExpLenght.current; }
	EOF;

// Rule ExpLenght
ruleExpLenght returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='length'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpLenghtAccess().getLengthKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpLenghtAccess().getLengthExpressaoExpressaoParserRuleCall_1_0());
				}
				lv_lengthExpressao_1_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpLenghtRule());
					}
					set(
						$current,
						"lengthExpressao",
						lv_lengthExpressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpPrimaria
entryRuleExpPrimaria returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpPrimariaRule()); }
	iv_ruleExpPrimaria=ruleExpPrimaria
	{ $current=$iv_ruleExpPrimaria.current; }
	EOF;

// Rule ExpPrimaria
ruleExpPrimaria returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpPrimariaAccess().getPidPIdParserRuleCall_0_0());
				}
				lv_pid_0_0=rulePId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpPrimariaRule());
					}
					set(
						$current,
						"pid",
						lv_pid_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.PId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpPrimariaAccess().getValorValorParserRuleCall_1_0());
				}
				lv_valor_1_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpPrimariaRule());
					}
					set(
						$current,
						"valor",
						lv_valor_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExpPrimariaAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpPrimariaAccess().getExpressaoExpressaoParserRuleCall_2_1_0());
					}
					lv_expressao_3_0=ruleExpressao
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpPrimariaRule());
						}
						set(
							$current,
							"expressao",
							lv_expressao_3_0,
							"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getExpPrimariaAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleExpUnaria
entryRuleExpUnaria returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpUnariaRule()); }
	iv_ruleExpUnaria=ruleExpUnaria
	{ $current=$iv_ruleExpUnaria.current; }
	EOF;

// Rule ExpUnaria
ruleExpUnaria returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpUnariaAccess().getMenosExpressaoExpMenosParserRuleCall_0_0());
				}
				lv_menosExpressao_0_0=ruleExpMenos
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpUnariaRule());
					}
					set(
						$current,
						"menosExpressao",
						lv_menosExpressao_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpMenos");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpUnariaAccess().getNotExpressaoExpNotParserRuleCall_1_0());
				}
				lv_notExpressao_1_0=ruleExpNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpUnariaRule());
					}
					set(
						$current,
						"notExpressao",
						lv_notExpressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpNot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpUnariaAccess().getLengthExpressaoExpLenghtParserRuleCall_2_0());
				}
				lv_lengthExpressao_2_0=ruleExpLenght
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpUnariaRule());
					}
					set(
						$current,
						"lengthExpressao",
						lv_lengthExpressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpLenght");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpBinaria
entryRuleExpBinaria returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpBinariaRule()); }
	iv_ruleExpBinaria=ruleExpBinaria
	{ $current=$iv_ruleExpBinaria.current; }
	EOF;

// Rule ExpBinaria
ruleExpBinaria returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getSomaExpressaoExpSomaParserRuleCall_0_0());
				}
				lv_somaExpressao_0_0=ruleExpSoma
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"somaExpressao",
						lv_somaExpressao_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpSoma");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getSubExpressaoExpSubParserRuleCall_1_0());
				}
				lv_subExpressao_1_0=ruleExpSub
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"subExpressao",
						lv_subExpressao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpSub");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getOrExpressaoExpOrParserRuleCall_2_0());
				}
				lv_orExpressao_2_0=ruleExpOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"orExpressao",
						lv_orExpressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpOr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getAndExpressaoExpAndParserRuleCall_3_0());
				}
				lv_andExpressao_3_0=ruleExpAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"andExpressao",
						lv_andExpressao_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpAnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getEqualsExpressaoExpEqualsParserRuleCall_4_0());
				}
				lv_equalsExpressao_4_0=ruleExpEquals
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"equalsExpressao",
						lv_equalsExpressao_4_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpEquals");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpBinariaAccess().getConcatExpressaoExpConcatParserRuleCall_5_0());
				}
				lv_concatExpressao_5_0=ruleExpConcat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpBinariaRule());
					}
					set(
						$current,
						"concatExpressao",
						lv_concatExpressao_5_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpConcat");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpSoma
entryRuleExpSoma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpSomaRule()); }
	iv_ruleExpSoma=ruleExpSoma
	{ $current=$iv_ruleExpSoma.current; }
	EOF;

// Rule ExpSoma
ruleExpSoma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpSomaAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpSomaRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='+'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpSomaAccess().getPlusSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpSomaAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpSomaRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpSub
entryRuleExpSub returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpSubRule()); }
	iv_ruleExpSub=ruleExpSub
	{ $current=$iv_ruleExpSub.current; }
	EOF;

// Rule ExpSub
ruleExpSub returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpSubAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpSubRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpSubAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpSubAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpSubRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpAnd
entryRuleExpAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpAndRule()); }
	iv_ruleExpAnd=ruleExpAnd
	{ $current=$iv_ruleExpAnd.current; }
	EOF;

// Rule ExpAnd
ruleExpAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpAndAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpAndRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpAndAccess().getAndKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpAndAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpAndRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpOr
entryRuleExpOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpOrRule()); }
	iv_ruleExpOr=ruleExpOr
	{ $current=$iv_ruleExpOr.current; }
	EOF;

// Rule ExpOr
ruleExpOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpOrAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpOrRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpOrAccess().getOrKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpOrAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpOrRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpEquals
entryRuleExpEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpEqualsRule()); }
	iv_ruleExpEquals=ruleExpEquals
	{ $current=$iv_ruleExpEquals.current; }
	EOF;

// Rule ExpEquals
ruleExpEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpEqualsAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpEqualsRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='=='
		{
			newLeafNode(otherlv_1, grammarAccess.getExpEqualsAccess().getEqualsSignEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpEqualsAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpEqualsRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpConcat
entryRuleExpConcat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpConcatRule()); }
	iv_ruleExpConcat=ruleExpConcat
	{ $current=$iv_ruleExpConcat.current; }
	EOF;

// Rule ExpConcat
ruleExpConcat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpConcatAccess().getValorValorParserRuleCall_0_0());
				}
				lv_valor_0_0=ruleValor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpConcatRule());
					}
					set(
						$current,
						"valor",
						lv_valor_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='++'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpConcatAccess().getPlusSignPlusSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpConcatAccess().getExpressaoExpressaoParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpConcatRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressao
entryRuleExpressao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressaoRule()); }
	iv_ruleExpressao=ruleExpressao
	{ $current=$iv_ruleExpressao.current; }
	EOF;

// Rule Expressao
ruleExpressao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleExpUnaria
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getExpressaoAccess().getExpUnariaExpUnariaParserRuleCall_0_0());
				}
				lv_expUnaria_0_0=ruleExpUnaria
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressaoRule());
					}
					set(
						$current,
						"expUnaria",
						lv_expUnaria_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpUnaria");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressaoAccess().getExpPrimariaExpPrimariaParserRuleCall_1_0());
				}
				lv_expPrimaria_1_0=ruleExpPrimaria
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressaoRule());
					}
					set(
						$current,
						"expPrimaria",
						lv_expPrimaria_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpPrimaria");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressaoAccess().getExpBinariaExpBinariaParserRuleCall_2_0());
				}
				lv_expBinaria_2_0=ruleExpBinaria
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressaoRule());
					}
					set(
						$current,
						"expBinaria",
						lv_expBinaria_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ExpBinaria");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComandoSimples
entryRuleComandoSimples returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComandoSimplesRule()); }
	iv_ruleComandoSimples=ruleComandoSimples
	{ $current=$iv_ruleComandoSimples.current; }
	EOF;

// Rule ComandoSimples
ruleComandoSimples returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getSkipSkipParserRuleCall_0_0());
				}
				lv_skip_0_0=ruleSkip
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"skip",
						lv_skip_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Skip");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getAtribuicaoAtribuicaoParserRuleCall_1_0());
				}
				lv_atribuicao_1_0=ruleAtribuicao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"atribuicao",
						lv_atribuicao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Atribuicao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getComandoDeclaracaoComandoDeclaracaoParserRuleCall_2_0());
				}
				lv_comandoDeclaracao_2_0=ruleComandoDeclaracao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"comandoDeclaracao",
						lv_comandoDeclaracao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.ComandoDeclaracao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getWhileWhileParserRuleCall_3_0());
				}
				lv_while_3_0=ruleWhile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"while",
						lv_while_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.While");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getIfThenElseIfThenElseParserRuleCall_4_0());
				}
				lv_ifThenElse_4_0=ruleIfThenElse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"ifThenElse",
						lv_ifThenElse_4_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.IfThenElse");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoSimplesAccess().getIoIOParserRuleCall_5_0());
				}
				lv_io_5_0=ruleIO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
					}
					set(
						$current,
						"io",
						lv_io_5_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.IO");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getComandoSimplesAccess().getLeftParenthesisKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComandoSimplesAccess().getComandoComandoParserRuleCall_6_1_0());
					}
					lv_comando_7_0=ruleComando
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComandoSimplesRule());
						}
						set(
							$current,
							"comando",
							lv_comando_7_0,
							"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getComandoSimplesAccess().getRightParenthesisKeyword_6_2());
			}
		)
	)
;

// Entry rule entryRuleComandoDeclaracao
entryRuleComandoDeclaracao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComandoDeclaracaoRule()); }
	iv_ruleComandoDeclaracao=ruleComandoDeclaracao
	{ $current=$iv_ruleComandoDeclaracao.current; }
	EOF;

// Rule ComandoDeclaracao
ruleComandoDeclaracao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getComandoDeclaracaoAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoDeclaracaoAccess().getDeclaracaoDeclaracaoParserRuleCall_1_0());
				}
				lv_declaracao_1_0=ruleDeclaracao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoDeclaracaoRule());
					}
					set(
						$current,
						"declaracao",
						lv_declaracao_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Declaracao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getComandoDeclaracaoAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComandoDeclaracaoAccess().getComandoComandoParserRuleCall_3_0());
				}
				lv_comando_3_0=ruleComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComandoDeclaracaoRule());
					}
					set(
						$current,
						"comando",
						lv_comando_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getComandoDeclaracaoAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDeclaracao
entryRuleDeclaracao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaracaoRule()); }
	iv_ruleDeclaracao=ruleDeclaracao
	{ $current=$iv_ruleDeclaracao.current; }
	EOF;

// Rule Declaracao
ruleDeclaracao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleDeclaracaoComposta
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoAccess().getDecCompostaDeclaracaoCompostaParserRuleCall_0_0());
				}
				lv_decComposta_0_0=ruleDeclaracaoComposta
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoRule());
					}
					set(
						$current,
						"decComposta",
						lv_decComposta_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.DeclaracaoComposta");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoAccess().getDecVariavelDeclaracaoVariavelParserRuleCall_1_0());
				}
				lv_decVariavel_1_0=ruleDeclaracaoVariavel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoRule());
					}
					set(
						$current,
						"decVariavel",
						lv_decVariavel_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.DeclaracaoVariavel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getDeclaracaoAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclaracaoAccess().getDeclaracaoDeclaracaoParserRuleCall_2_1_0());
					}
					lv_declaracao_3_0=ruleDeclaracao
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclaracaoRule());
						}
						set(
							$current,
							"declaracao",
							lv_declaracao_3_0,
							"br.ufpe.cin.plp.imperativa1.Imperativa1.Declaracao");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getDeclaracaoAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleDeclaracaoComposta
entryRuleDeclaracaoComposta returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaracaoCompostaRule()); }
	iv_ruleDeclaracaoComposta=ruleDeclaracaoComposta
	{ $current=$iv_ruleDeclaracaoComposta.current; }
	EOF;

// Rule DeclaracaoComposta
ruleDeclaracaoComposta returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoCompostaAccess().getDecVariavelDeclaracaoVariavelParserRuleCall_0_0());
				}
				lv_decVariavel_0_0=ruleDeclaracaoVariavel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoCompostaRule());
					}
					set(
						$current,
						"decVariavel",
						lv_decVariavel_0_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.DeclaracaoVariavel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclaracaoCompostaAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoCompostaAccess().getDeclaracaoDeclaracaoParserRuleCall_2_0());
				}
				lv_declaracao_2_0=ruleDeclaracao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoCompostaRule());
					}
					set(
						$current,
						"declaracao",
						lv_declaracao_2_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Declaracao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeclaracaoVariavel
entryRuleDeclaracaoVariavel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaracaoVariavelRule()); }
	iv_ruleDeclaracaoVariavel=ruleDeclaracaoVariavel
	{ $current=$iv_ruleDeclaracaoVariavel.current; }
	EOF;

// Rule DeclaracaoVariavel
ruleDeclaracaoVariavel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclaracaoVariavelAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoVariavelAccess().getPidPIdParserRuleCall_1_0());
				}
				lv_pid_1_0=rulePId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoVariavelRule());
					}
					set(
						$current,
						"pid",
						lv_pid_1_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.PId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getDeclaracaoVariavelAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaracaoVariavelAccess().getExpressaoExpressaoParserRuleCall_3_0());
				}
				lv_expressao_3_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaracaoVariavelRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_3_0,
						"br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_VALORINTEIRO : '1'..'9' ('0'..'9')*;

RULE_VALORBOOLEANO : ('true'|'false');

RULE_VALORSTRING : ('a'..'z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
