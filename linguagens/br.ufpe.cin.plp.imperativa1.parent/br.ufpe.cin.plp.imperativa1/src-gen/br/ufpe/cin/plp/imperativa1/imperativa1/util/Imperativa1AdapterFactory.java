/**
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.imperativa1.util;

import br.ufpe.cin.plp.imperativa1.imperativa1.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see br.ufpe.cin.plp.imperativa1.imperativa1.Imperativa1Package
 * @generated
 */
public class Imperativa1AdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Imperativa1Package modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Imperativa1AdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Imperativa1Package.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Imperativa1Switch<Adapter> modelSwitch =
    new Imperativa1Switch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseComando(Comando object)
      {
        return createComandoAdapter();
      }
      @Override
      public Adapter caseSequenciaComando(SequenciaComando object)
      {
        return createSequenciaComandoAdapter();
      }
      @Override
      public Adapter caseIO(IO object)
      {
        return createIOAdapter();
      }
      @Override
      public Adapter caseRead(Read object)
      {
        return createReadAdapter();
      }
      @Override
      public Adapter caseWrite(Write object)
      {
        return createWriteAdapter();
      }
      @Override
      public Adapter caseIfThenElse(IfThenElse object)
      {
        return createIfThenElseAdapter();
      }
      @Override
      public Adapter caseWhile(While object)
      {
        return createWhileAdapter();
      }
      @Override
      public Adapter caseSkip(Skip object)
      {
        return createSkipAdapter();
      }
      @Override
      public Adapter caseAtribuicao(Atribuicao object)
      {
        return createAtribuicaoAdapter();
      }
      @Override
      public Adapter caseValor(Valor object)
      {
        return createValorAdapter();
      }
      @Override
      public Adapter caseExpMenos(ExpMenos object)
      {
        return createExpMenosAdapter();
      }
      @Override
      public Adapter caseExpNot(ExpNot object)
      {
        return createExpNotAdapter();
      }
      @Override
      public Adapter caseExpLenght(ExpLenght object)
      {
        return createExpLenghtAdapter();
      }
      @Override
      public Adapter caseExpPrimaria(ExpPrimaria object)
      {
        return createExpPrimariaAdapter();
      }
      @Override
      public Adapter caseExpUnaria(ExpUnaria object)
      {
        return createExpUnariaAdapter();
      }
      @Override
      public Adapter caseExpBinaria(ExpBinaria object)
      {
        return createExpBinariaAdapter();
      }
      @Override
      public Adapter caseExpSoma(ExpSoma object)
      {
        return createExpSomaAdapter();
      }
      @Override
      public Adapter caseExpSub(ExpSub object)
      {
        return createExpSubAdapter();
      }
      @Override
      public Adapter caseExpAnd(ExpAnd object)
      {
        return createExpAndAdapter();
      }
      @Override
      public Adapter caseExpOr(ExpOr object)
      {
        return createExpOrAdapter();
      }
      @Override
      public Adapter caseExpEquals(ExpEquals object)
      {
        return createExpEqualsAdapter();
      }
      @Override
      public Adapter caseExpConcat(ExpConcat object)
      {
        return createExpConcatAdapter();
      }
      @Override
      public Adapter caseExpressao(Expressao object)
      {
        return createExpressaoAdapter();
      }
      @Override
      public Adapter caseComandoSimples(ComandoSimples object)
      {
        return createComandoSimplesAdapter();
      }
      @Override
      public Adapter caseComandoDeclaracao(ComandoDeclaracao object)
      {
        return createComandoDeclaracaoAdapter();
      }
      @Override
      public Adapter caseDeclaracao(Declaracao object)
      {
        return createDeclaracaoAdapter();
      }
      @Override
      public Adapter caseDeclaracaoComposta(DeclaracaoComposta object)
      {
        return createDeclaracaoCompostaAdapter();
      }
      @Override
      public Adapter caseDeclaracaoVariavel(DeclaracaoVariavel object)
      {
        return createDeclaracaoVariavelAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Comando <em>Comando</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Comando
   * @generated
   */
  public Adapter createComandoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.SequenciaComando <em>Sequencia Comando</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.SequenciaComando
   * @generated
   */
  public Adapter createSequenciaComandoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.IO <em>IO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.IO
   * @generated
   */
  public Adapter createIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Read <em>Read</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Read
   * @generated
   */
  public Adapter createReadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Write <em>Write</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Write
   * @generated
   */
  public Adapter createWriteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.IfThenElse <em>If Then Else</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.IfThenElse
   * @generated
   */
  public Adapter createIfThenElseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.While <em>While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.While
   * @generated
   */
  public Adapter createWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Skip <em>Skip</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Skip
   * @generated
   */
  public Adapter createSkipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Atribuicao <em>Atribuicao</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Atribuicao
   * @generated
   */
  public Adapter createAtribuicaoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Valor <em>Valor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Valor
   * @generated
   */
  public Adapter createValorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpMenos <em>Exp Menos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpMenos
   * @generated
   */
  public Adapter createExpMenosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpNot <em>Exp Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpNot
   * @generated
   */
  public Adapter createExpNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpLenght <em>Exp Lenght</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpLenght
   * @generated
   */
  public Adapter createExpLenghtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpPrimaria <em>Exp Primaria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpPrimaria
   * @generated
   */
  public Adapter createExpPrimariaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpUnaria <em>Exp Unaria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpUnaria
   * @generated
   */
  public Adapter createExpUnariaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpBinaria <em>Exp Binaria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpBinaria
   * @generated
   */
  public Adapter createExpBinariaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpSoma <em>Exp Soma</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpSoma
   * @generated
   */
  public Adapter createExpSomaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpSub <em>Exp Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpSub
   * @generated
   */
  public Adapter createExpSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpAnd <em>Exp And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpAnd
   * @generated
   */
  public Adapter createExpAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpOr <em>Exp Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpOr
   * @generated
   */
  public Adapter createExpOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpEquals <em>Exp Equals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpEquals
   * @generated
   */
  public Adapter createExpEqualsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ExpConcat <em>Exp Concat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ExpConcat
   * @generated
   */
  public Adapter createExpConcatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Expressao <em>Expressao</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Expressao
   * @generated
   */
  public Adapter createExpressaoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ComandoSimples <em>Comando Simples</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ComandoSimples
   * @generated
   */
  public Adapter createComandoSimplesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.ComandoDeclaracao <em>Comando Declaracao</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.ComandoDeclaracao
   * @generated
   */
  public Adapter createComandoDeclaracaoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.Declaracao <em>Declaracao</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.Declaracao
   * @generated
   */
  public Adapter createDeclaracaoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoComposta <em>Declaracao Composta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoComposta
   * @generated
   */
  public Adapter createDeclaracaoCompostaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoVariavel <em>Declaracao Variavel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoVariavel
   * @generated
   */
  public Adapter createDeclaracaoVariavelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Imperativa1AdapterFactory
