/*
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Imperativa1GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Model");
		private final Assignment cComandosAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cComandosComandoParserRuleCall_0 = (RuleCall)cComandosAssignment.eContents().get(0);
		
		//Model:
		//	comandos+=Comando*;
		@Override public ParserRule getRule() { return rule; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment() { return cComandosAssignment; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_0() { return cComandosComandoParserRuleCall_0; }
	}
	public class ComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Comando");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSequenciaComandoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSequenciaComandoSequenciaComandoParserRuleCall_0_0 = (RuleCall)cSequenciaComandoAssignment_0.eContents().get(0);
		private final Assignment cComandoSimplesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cComandoSimplesComandoSimplesParserRuleCall_1_0 = (RuleCall)cComandoSimplesAssignment_1.eContents().get(0);
		
		//Comando:
		//	=> sequenciaComando=SequenciaComando | comandoSimples=ComandoSimples;
		@Override public ParserRule getRule() { return rule; }
		
		//=> sequenciaComando=SequenciaComando | comandoSimples=ComandoSimples
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> sequenciaComando=SequenciaComando
		public Assignment getSequenciaComandoAssignment_0() { return cSequenciaComandoAssignment_0; }
		
		//SequenciaComando
		public RuleCall getSequenciaComandoSequenciaComandoParserRuleCall_0_0() { return cSequenciaComandoSequenciaComandoParserRuleCall_0_0; }
		
		//comandoSimples=ComandoSimples
		public Assignment getComandoSimplesAssignment_1() { return cComandoSimplesAssignment_1; }
		
		//ComandoSimples
		public RuleCall getComandoSimplesComandoSimplesParserRuleCall_1_0() { return cComandoSimplesComandoSimplesParserRuleCall_1_0; }
	}
	public class SequenciaComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.SequenciaComando");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComandoSimplesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComandoSimplesComandoSimplesParserRuleCall_0_0 = (RuleCall)cComandoSimplesAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComandoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComandoComandoParserRuleCall_2_0 = (RuleCall)cComandoAssignment_2.eContents().get(0);
		
		//SequenciaComando:
		//	comandoSimples=ComandoSimples ';' comando=Comando;
		@Override public ParserRule getRule() { return rule; }
		
		//comandoSimples=ComandoSimples ';' comando=Comando
		public Group getGroup() { return cGroup; }
		
		//comandoSimples=ComandoSimples
		public Assignment getComandoSimplesAssignment_0() { return cComandoSimplesAssignment_0; }
		
		//ComandoSimples
		public RuleCall getComandoSimplesComandoSimplesParserRuleCall_0_0() { return cComandoSimplesComandoSimplesParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//comando=Comando
		public Assignment getComandoAssignment_2() { return cComandoAssignment_2; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_2_0() { return cComandoComandoParserRuleCall_2_0; }
	}
	public class IOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.IO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReadAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cReadReadParserRuleCall_0_0 = (RuleCall)cReadAssignment_0.eContents().get(0);
		private final Assignment cWriteAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWriteWriteParserRuleCall_1_0 = (RuleCall)cWriteAssignment_1.eContents().get(0);
		
		//IO:
		//	read=Read
		//	| write=Write;
		@Override public ParserRule getRule() { return rule; }
		
		//read=Read | write=Write
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//read=Read
		public Assignment getReadAssignment_0() { return cReadAssignment_0; }
		
		//Read
		public RuleCall getReadReadParserRuleCall_0_0() { return cReadReadParserRuleCall_0_0; }
		
		//write=Write
		public Assignment getWriteAssignment_1() { return cWriteAssignment_1; }
		
		//Write
		public RuleCall getWriteWriteParserRuleCall_1_0() { return cWriteWriteParserRuleCall_1_0; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPidAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPidPIdParserRuleCall_2_0 = (RuleCall)cPidAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Read:
		//	'read' '(' pid=PId ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'read' '(' pid=PId ')'
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pid=PId
		public Assignment getPidAssignment_2() { return cPidAssignment_2; }
		
		//PId
		public RuleCall getPidPIdParserRuleCall_2_0() { return cPidPIdParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Write");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Write:
		//	'write' '(' expressao=Expressao ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'write' '(' expressao=Expressao ')'
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressaoExpressaoParserRuleCall_1_0 = (RuleCall)cExpressaoAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandoComandoParserRuleCall_3_0 = (RuleCall)cComandoAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComandoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComandoComandoParserRuleCall_5_0 = (RuleCall)cComandoAssignment_5.eContents().get(0);
		
		//IfThenElse:
		//	'if' expressao=Expressao 'then' comando=Comando 'else' comando=Comando;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expressao=Expressao 'then' comando=Comando 'else' comando=Comando
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_1() { return cExpressaoAssignment_1; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_1_0() { return cExpressaoExpressaoParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//comando=Comando
		public Assignment getComandoAssignment_3() { return cComandoAssignment_3; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_3_0() { return cComandoComandoParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//comando=Comando
		public Assignment getComandoAssignment_5() { return cComandoAssignment_5; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_5_0() { return cComandoComandoParserRuleCall_5_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressaoExpressaoParserRuleCall_1_0 = (RuleCall)cExpressaoAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandoComandoParserRuleCall_3_0 = (RuleCall)cComandoAssignment_3.eContents().get(0);
		
		//While:
		//	'while' expressao=Expressao 'do' comando=Comando;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expressao=Expressao 'do' comando=Comando
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_1() { return cExpressaoAssignment_1; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_1_0() { return cExpressaoExpressaoParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//comando=Comando
		public Assignment getComandoAssignment_3() { return cComandoAssignment_3; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_3_0() { return cComandoComandoParserRuleCall_3_0; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Skip");
		private final Assignment cSkipAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSkipSkipKeyword_0 = (Keyword)cSkipAssignment.eContents().get(0);
		
		//Skip:
		//	skip='skip';
		@Override public ParserRule getRule() { return rule; }
		
		//skip='skip'
		public Assignment getSkipAssignment() { return cSkipAssignment; }
		
		//'skip'
		public Keyword getSkipSkipKeyword_0() { return cSkipSkipKeyword_0; }
	}
	public class AtribuicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Atribuicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPidPIdParserRuleCall_0_0 = (RuleCall)cPidAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//Atribuicao:
		//	pid=PId ':=' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//pid=PId ':=' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//pid=PId
		public Assignment getPidAssignment_0() { return cPidAssignment_0; }
		
		//PId
		public RuleCall getPidPIdParserRuleCall_0_0() { return cPidPIdParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class PIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.PId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVALORSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVALORSTRINGTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cVALORINTEIROTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//PId:
		//	VALORSTRING (VALORSTRING | VALORINTEIRO)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VALORSTRING (VALORSTRING | VALORINTEIRO)*
		public Group getGroup() { return cGroup; }
		
		//VALORSTRING
		public RuleCall getVALORSTRINGTerminalRuleCall_0() { return cVALORSTRINGTerminalRuleCall_0; }
		
		//(VALORSTRING | VALORINTEIRO)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//VALORSTRING
		public RuleCall getVALORSTRINGTerminalRuleCall_1_0() { return cVALORSTRINGTerminalRuleCall_1_0; }
		
		//VALORINTEIRO
		public RuleCall getVALORINTEIROTerminalRuleCall_1_1() { return cVALORINTEIROTerminalRuleCall_1_1; }
	}
	public class ValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Valor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntTypeVALORINTEIROTerminalRuleCall_0_0 = (RuleCall)cIntTypeAssignment_0.eContents().get(0);
		private final Assignment cStringTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeVALORSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringTypeAssignment_1.eContents().get(0);
		private final Assignment cBoolTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolTypeVALORBOOLEANOTerminalRuleCall_2_0 = (RuleCall)cBoolTypeAssignment_2.eContents().get(0);
		
		//Valor:
		//	intType=VALORINTEIRO
		//	| stringType=VALORSTRING
		//	| boolType=VALORBOOLEANO;
		@Override public ParserRule getRule() { return rule; }
		
		//intType=VALORINTEIRO | stringType=VALORSTRING | boolType=VALORBOOLEANO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intType=VALORINTEIRO
		public Assignment getIntTypeAssignment_0() { return cIntTypeAssignment_0; }
		
		//VALORINTEIRO
		public RuleCall getIntTypeVALORINTEIROTerminalRuleCall_0_0() { return cIntTypeVALORINTEIROTerminalRuleCall_0_0; }
		
		//stringType=VALORSTRING
		public Assignment getStringTypeAssignment_1() { return cStringTypeAssignment_1; }
		
		//VALORSTRING
		public RuleCall getStringTypeVALORSTRINGTerminalRuleCall_1_0() { return cStringTypeVALORSTRINGTerminalRuleCall_1_0; }
		
		//boolType=VALORBOOLEANO
		public Assignment getBoolTypeAssignment_2() { return cBoolTypeAssignment_2; }
		
		//VALORBOOLEANO
		public RuleCall getBoolTypeVALORBOOLEANOTerminalRuleCall_2_0() { return cBoolTypeVALORBOOLEANOTerminalRuleCall_2_0; }
	}
	public class ExpMenosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpMenos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMenosExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMenosExpressaoExpressaoParserRuleCall_1_0 = (RuleCall)cMenosExpressaoAssignment_1.eContents().get(0);
		
		//ExpMenos:
		//	'-' menosExpressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' menosExpressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//menosExpressao=Expressao
		public Assignment getMenosExpressaoAssignment_1() { return cMenosExpressaoAssignment_1; }
		
		//Expressao
		public RuleCall getMenosExpressaoExpressaoParserRuleCall_1_0() { return cMenosExpressaoExpressaoParserRuleCall_1_0; }
	}
	public class ExpNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNotExpressaoExpressaoParserRuleCall_1_0 = (RuleCall)cNotExpressaoAssignment_1.eContents().get(0);
		
		//ExpNot:
		//	'not' notExpressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' notExpressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//notExpressao=Expressao
		public Assignment getNotExpressaoAssignment_1() { return cNotExpressaoAssignment_1; }
		
		//Expressao
		public RuleCall getNotExpressaoExpressaoParserRuleCall_1_0() { return cNotExpressaoExpressaoParserRuleCall_1_0; }
	}
	public class ExpLenghtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpLenght");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthExpressaoExpressaoParserRuleCall_1_0 = (RuleCall)cLengthExpressaoAssignment_1.eContents().get(0);
		
		//ExpLenght:
		//	'length' lengthExpressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' lengthExpressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//'length'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//lengthExpressao=Expressao
		public Assignment getLengthExpressaoAssignment_1() { return cLengthExpressaoAssignment_1; }
		
		//Expressao
		public RuleCall getLengthExpressaoExpressaoParserRuleCall_1_0() { return cLengthExpressaoExpressaoParserRuleCall_1_0; }
	}
	public class ExpPrimariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpPrimaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPidAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPidPIdParserRuleCall_0_0 = (RuleCall)cPidAssignment_0.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressaoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_1_0 = (RuleCall)cExpressaoAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ExpPrimaria:
		//	pid=PId
		//	| valor=Valor
		//	| '(' expressao=Expressao ')';
		@Override public ParserRule getRule() { return rule; }
		
		//pid=PId | valor=Valor | '(' expressao=Expressao ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pid=PId
		public Assignment getPidAssignment_0() { return cPidAssignment_0; }
		
		//PId
		public RuleCall getPidPIdParserRuleCall_0_0() { return cPidPIdParserRuleCall_0_0; }
		
		//valor=Valor
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_1_0() { return cValorValorParserRuleCall_1_0; }
		
		//'(' expressao=Expressao ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2_1() { return cExpressaoAssignment_2_1; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_1_0() { return cExpressaoExpressaoParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ExpUnariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpUnaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMenosExpressaoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMenosExpressaoExpMenosParserRuleCall_0_0 = (RuleCall)cMenosExpressaoAssignment_0.eContents().get(0);
		private final Assignment cNotExpressaoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNotExpressaoExpNotParserRuleCall_1_0 = (RuleCall)cNotExpressaoAssignment_1.eContents().get(0);
		private final Assignment cLengthExpressaoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLengthExpressaoExpLenghtParserRuleCall_2_0 = (RuleCall)cLengthExpressaoAssignment_2.eContents().get(0);
		
		//ExpUnaria:
		//	menosExpressao=ExpMenos
		//	| notExpressao=ExpNot
		//	| lengthExpressao=ExpLenght;
		@Override public ParserRule getRule() { return rule; }
		
		//menosExpressao=ExpMenos | notExpressao=ExpNot | lengthExpressao=ExpLenght
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//menosExpressao=ExpMenos
		public Assignment getMenosExpressaoAssignment_0() { return cMenosExpressaoAssignment_0; }
		
		//ExpMenos
		public RuleCall getMenosExpressaoExpMenosParserRuleCall_0_0() { return cMenosExpressaoExpMenosParserRuleCall_0_0; }
		
		//notExpressao=ExpNot
		public Assignment getNotExpressaoAssignment_1() { return cNotExpressaoAssignment_1; }
		
		//ExpNot
		public RuleCall getNotExpressaoExpNotParserRuleCall_1_0() { return cNotExpressaoExpNotParserRuleCall_1_0; }
		
		//lengthExpressao=ExpLenght
		public Assignment getLengthExpressaoAssignment_2() { return cLengthExpressaoAssignment_2; }
		
		//ExpLenght
		public RuleCall getLengthExpressaoExpLenghtParserRuleCall_2_0() { return cLengthExpressaoExpLenghtParserRuleCall_2_0; }
	}
	public class ExpBinariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpBinaria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSomaExpressaoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSomaExpressaoExpSomaParserRuleCall_0_0 = (RuleCall)cSomaExpressaoAssignment_0.eContents().get(0);
		private final Assignment cSubExpressaoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubExpressaoExpSubParserRuleCall_1_0 = (RuleCall)cSubExpressaoAssignment_1.eContents().get(0);
		private final Assignment cOrExpressaoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOrExpressaoExpOrParserRuleCall_2_0 = (RuleCall)cOrExpressaoAssignment_2.eContents().get(0);
		private final Assignment cAndExpressaoAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAndExpressaoExpAndParserRuleCall_3_0 = (RuleCall)cAndExpressaoAssignment_3.eContents().get(0);
		private final Assignment cEqualsExpressaoAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cEqualsExpressaoExpEqualsParserRuleCall_4_0 = (RuleCall)cEqualsExpressaoAssignment_4.eContents().get(0);
		private final Assignment cConcatExpressaoAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConcatExpressaoExpConcatParserRuleCall_5_0 = (RuleCall)cConcatExpressaoAssignment_5.eContents().get(0);
		
		//ExpBinaria:
		//	somaExpressao=ExpSoma
		//	| subExpressao=ExpSub
		//	| orExpressao=ExpOr
		//	| andExpressao=ExpAnd
		//	| equalsExpressao=ExpEquals
		//	| concatExpressao=ExpConcat;
		@Override public ParserRule getRule() { return rule; }
		
		//somaExpressao=ExpSoma | subExpressao=ExpSub | orExpressao=ExpOr | andExpressao=ExpAnd | equalsExpressao=ExpEquals |
		//concatExpressao=ExpConcat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//somaExpressao=ExpSoma
		public Assignment getSomaExpressaoAssignment_0() { return cSomaExpressaoAssignment_0; }
		
		//ExpSoma
		public RuleCall getSomaExpressaoExpSomaParserRuleCall_0_0() { return cSomaExpressaoExpSomaParserRuleCall_0_0; }
		
		//subExpressao=ExpSub
		public Assignment getSubExpressaoAssignment_1() { return cSubExpressaoAssignment_1; }
		
		//ExpSub
		public RuleCall getSubExpressaoExpSubParserRuleCall_1_0() { return cSubExpressaoExpSubParserRuleCall_1_0; }
		
		//orExpressao=ExpOr
		public Assignment getOrExpressaoAssignment_2() { return cOrExpressaoAssignment_2; }
		
		//ExpOr
		public RuleCall getOrExpressaoExpOrParserRuleCall_2_0() { return cOrExpressaoExpOrParserRuleCall_2_0; }
		
		//andExpressao=ExpAnd
		public Assignment getAndExpressaoAssignment_3() { return cAndExpressaoAssignment_3; }
		
		//ExpAnd
		public RuleCall getAndExpressaoExpAndParserRuleCall_3_0() { return cAndExpressaoExpAndParserRuleCall_3_0; }
		
		//equalsExpressao=ExpEquals
		public Assignment getEqualsExpressaoAssignment_4() { return cEqualsExpressaoAssignment_4; }
		
		//ExpEquals
		public RuleCall getEqualsExpressaoExpEqualsParserRuleCall_4_0() { return cEqualsExpressaoExpEqualsParserRuleCall_4_0; }
		
		//concatExpressao=ExpConcat
		public Assignment getConcatExpressaoAssignment_5() { return cConcatExpressaoAssignment_5; }
		
		//ExpConcat
		public RuleCall getConcatExpressaoExpConcatParserRuleCall_5_0() { return cConcatExpressaoExpConcatParserRuleCall_5_0; }
	}
	public class ExpSomaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpSoma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpSoma:
		//	valor=Valor '+' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor '+' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpSub:
		//	valor=Valor '-' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor '-' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpAnd:
		//	valor=Valor 'and' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor 'and' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpOr:
		//	valor=Valor 'or' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor 'or' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpEquals:
		//	valor=Valor '==' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor '==' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ExpConcat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//ExpConcat:
		//	valor=Valor '++' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=Valor '++' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//valor=Valor
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }
		
		//Valor
		public RuleCall getValorValorParserRuleCall_0_0() { return cValorValorParserRuleCall_0_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0() { return cExpressaoExpressaoParserRuleCall_2_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Expressao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpUnariaAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpUnariaExpUnariaParserRuleCall_0_0 = (RuleCall)cExpUnariaAssignment_0.eContents().get(0);
		private final Assignment cExpPrimariaAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpPrimariaExpPrimariaParserRuleCall_1_0 = (RuleCall)cExpPrimariaAssignment_1.eContents().get(0);
		private final Assignment cExpBinariaAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpBinariaExpBinariaParserRuleCall_2_0 = (RuleCall)cExpBinariaAssignment_2.eContents().get(0);
		
		//Expressao:
		//	=> expUnaria=ExpUnaria
		//	| expPrimaria=ExpPrimaria
		//	| expBinaria=ExpBinaria;
		@Override public ParserRule getRule() { return rule; }
		
		//=> expUnaria=ExpUnaria | expPrimaria=ExpPrimaria | expBinaria=ExpBinaria
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> expUnaria=ExpUnaria
		public Assignment getExpUnariaAssignment_0() { return cExpUnariaAssignment_0; }
		
		//ExpUnaria
		public RuleCall getExpUnariaExpUnariaParserRuleCall_0_0() { return cExpUnariaExpUnariaParserRuleCall_0_0; }
		
		//expPrimaria=ExpPrimaria
		public Assignment getExpPrimariaAssignment_1() { return cExpPrimariaAssignment_1; }
		
		//ExpPrimaria
		public RuleCall getExpPrimariaExpPrimariaParserRuleCall_1_0() { return cExpPrimariaExpPrimariaParserRuleCall_1_0; }
		
		//expBinaria=ExpBinaria
		public Assignment getExpBinariaAssignment_2() { return cExpBinariaAssignment_2; }
		
		//ExpBinaria
		public RuleCall getExpBinariaExpBinariaParserRuleCall_2_0() { return cExpBinariaExpBinariaParserRuleCall_2_0; }
	}
	public class ComandoSimplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ComandoSimples");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSkipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSkipSkipParserRuleCall_0_0 = (RuleCall)cSkipAssignment_0.eContents().get(0);
		private final Assignment cAtribuicaoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAtribuicaoAtribuicaoParserRuleCall_1_0 = (RuleCall)cAtribuicaoAssignment_1.eContents().get(0);
		private final Assignment cComandoDeclaracaoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cComandoDeclaracaoComandoDeclaracaoParserRuleCall_2_0 = (RuleCall)cComandoDeclaracaoAssignment_2.eContents().get(0);
		private final Assignment cWhileAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cWhileWhileParserRuleCall_3_0 = (RuleCall)cWhileAssignment_3.eContents().get(0);
		private final Assignment cIfThenElseAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIfThenElseIfThenElseParserRuleCall_4_0 = (RuleCall)cIfThenElseAssignment_4.eContents().get(0);
		private final Assignment cIoAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cIoIOParserRuleCall_5_0 = (RuleCall)cIoAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cComandoAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cComandoComandoParserRuleCall_6_1_0 = (RuleCall)cComandoAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ComandoSimples:
		//	skip=Skip
		//	| atribuicao=Atribuicao
		//	| comandoDeclaracao=ComandoDeclaracao
		//	| while=While
		//	| ifThenElse=IfThenElse
		//	| io=IO
		//	| '(' comando=Comando ')';
		@Override public ParserRule getRule() { return rule; }
		
		//skip=Skip | atribuicao=Atribuicao | comandoDeclaracao=ComandoDeclaracao | while=While | ifThenElse=IfThenElse | io=IO |
		//'(' comando=Comando ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//skip=Skip
		public Assignment getSkipAssignment_0() { return cSkipAssignment_0; }
		
		//Skip
		public RuleCall getSkipSkipParserRuleCall_0_0() { return cSkipSkipParserRuleCall_0_0; }
		
		//atribuicao=Atribuicao
		public Assignment getAtribuicaoAssignment_1() { return cAtribuicaoAssignment_1; }
		
		//Atribuicao
		public RuleCall getAtribuicaoAtribuicaoParserRuleCall_1_0() { return cAtribuicaoAtribuicaoParserRuleCall_1_0; }
		
		//comandoDeclaracao=ComandoDeclaracao
		public Assignment getComandoDeclaracaoAssignment_2() { return cComandoDeclaracaoAssignment_2; }
		
		//ComandoDeclaracao
		public RuleCall getComandoDeclaracaoComandoDeclaracaoParserRuleCall_2_0() { return cComandoDeclaracaoComandoDeclaracaoParserRuleCall_2_0; }
		
		//while=While
		public Assignment getWhileAssignment_3() { return cWhileAssignment_3; }
		
		//While
		public RuleCall getWhileWhileParserRuleCall_3_0() { return cWhileWhileParserRuleCall_3_0; }
		
		//ifThenElse=IfThenElse
		public Assignment getIfThenElseAssignment_4() { return cIfThenElseAssignment_4; }
		
		//IfThenElse
		public RuleCall getIfThenElseIfThenElseParserRuleCall_4_0() { return cIfThenElseIfThenElseParserRuleCall_4_0; }
		
		//io=IO
		public Assignment getIoAssignment_5() { return cIoAssignment_5; }
		
		//IO
		public RuleCall getIoIOParserRuleCall_5_0() { return cIoIOParserRuleCall_5_0; }
		
		//'(' comando=Comando ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//comando=Comando
		public Assignment getComandoAssignment_6_1() { return cComandoAssignment_6_1; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_6_1_0() { return cComandoComandoParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class ComandoDeclaracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.ComandoDeclaracao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclaracaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaracaoDeclaracaoParserRuleCall_1_0 = (RuleCall)cDeclaracaoAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandoComandoParserRuleCall_3_0 = (RuleCall)cComandoAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComandoDeclaracao:
		//	'{' declaracao=Declaracao ';' comando=Comando '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' declaracao=Declaracao ';' comando=Comando '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//declaracao=Declaracao
		public Assignment getDeclaracaoAssignment_1() { return cDeclaracaoAssignment_1; }
		
		//Declaracao
		public RuleCall getDeclaracaoDeclaracaoParserRuleCall_1_0() { return cDeclaracaoDeclaracaoParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//comando=Comando
		public Assignment getComandoAssignment_3() { return cComandoAssignment_3; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_3_0() { return cComandoComandoParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DeclaracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.Declaracao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDecCompostaAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDecCompostaDeclaracaoCompostaParserRuleCall_0_0 = (RuleCall)cDecCompostaAssignment_0.eContents().get(0);
		private final Assignment cDecVariavelAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDecVariavelDeclaracaoVariavelParserRuleCall_1_0 = (RuleCall)cDecVariavelAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDeclaracaoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaracaoDeclaracaoParserRuleCall_2_1_0 = (RuleCall)cDeclaracaoAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Declaracao:
		//	=> decComposta=DeclaracaoComposta
		//	| decVariavel=DeclaracaoVariavel
		//	| '(' declaracao=Declaracao ')';
		@Override public ParserRule getRule() { return rule; }
		
		//=> decComposta=DeclaracaoComposta | decVariavel=DeclaracaoVariavel | '(' declaracao=Declaracao ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> decComposta=DeclaracaoComposta
		public Assignment getDecCompostaAssignment_0() { return cDecCompostaAssignment_0; }
		
		//DeclaracaoComposta
		public RuleCall getDecCompostaDeclaracaoCompostaParserRuleCall_0_0() { return cDecCompostaDeclaracaoCompostaParserRuleCall_0_0; }
		
		//decVariavel=DeclaracaoVariavel
		public Assignment getDecVariavelAssignment_1() { return cDecVariavelAssignment_1; }
		
		//DeclaracaoVariavel
		public RuleCall getDecVariavelDeclaracaoVariavelParserRuleCall_1_0() { return cDecVariavelDeclaracaoVariavelParserRuleCall_1_0; }
		
		//'(' declaracao=Declaracao ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//declaracao=Declaracao
		public Assignment getDeclaracaoAssignment_2_1() { return cDeclaracaoAssignment_2_1; }
		
		//Declaracao
		public RuleCall getDeclaracaoDeclaracaoParserRuleCall_2_1_0() { return cDeclaracaoDeclaracaoParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class DeclaracaoCompostaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.DeclaracaoComposta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecVariavelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecVariavelDeclaracaoVariavelParserRuleCall_0_0 = (RuleCall)cDecVariavelAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaracaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaracaoDeclaracaoParserRuleCall_2_0 = (RuleCall)cDeclaracaoAssignment_2.eContents().get(0);
		
		//DeclaracaoComposta:
		//	decVariavel=DeclaracaoVariavel ',' declaracao=Declaracao;
		@Override public ParserRule getRule() { return rule; }
		
		//decVariavel=DeclaracaoVariavel ',' declaracao=Declaracao
		public Group getGroup() { return cGroup; }
		
		//decVariavel=DeclaracaoVariavel
		public Assignment getDecVariavelAssignment_0() { return cDecVariavelAssignment_0; }
		
		//DeclaracaoVariavel
		public RuleCall getDecVariavelDeclaracaoVariavelParserRuleCall_0_0() { return cDecVariavelDeclaracaoVariavelParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//declaracao=Declaracao
		public Assignment getDeclaracaoAssignment_2() { return cDeclaracaoAssignment_2; }
		
		//Declaracao
		public RuleCall getDeclaracaoDeclaracaoParserRuleCall_2_0() { return cDeclaracaoDeclaracaoParserRuleCall_2_0; }
	}
	public class DeclaracaoVariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.DeclaracaoVariavel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPidPIdParserRuleCall_1_0 = (RuleCall)cPidAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressaoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressaoExpressaoParserRuleCall_3_0 = (RuleCall)cExpressaoAssignment_3.eContents().get(0);
		
		//DeclaracaoVariavel:
		//	'var' pid=PId '=' expressao=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' pid=PId '=' expressao=Expressao
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//pid=PId
		public Assignment getPidAssignment_1() { return cPidAssignment_1; }
		
		//PId
		public RuleCall getPidPIdParserRuleCall_1_0() { return cPidPIdParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_3() { return cExpressaoAssignment_3; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_3_0() { return cExpressaoExpressaoParserRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final ComandoElements pComando;
	private final SequenciaComandoElements pSequenciaComando;
	private final IOElements pIO;
	private final ReadElements pRead;
	private final WriteElements pWrite;
	private final IfThenElseElements pIfThenElse;
	private final WhileElements pWhile;
	private final SkipElements pSkip;
	private final AtribuicaoElements pAtribuicao;
	private final PIdElements pPId;
	private final ValorElements pValor;
	private final ExpMenosElements pExpMenos;
	private final ExpNotElements pExpNot;
	private final ExpLenghtElements pExpLenght;
	private final ExpPrimariaElements pExpPrimaria;
	private final ExpUnariaElements pExpUnaria;
	private final ExpBinariaElements pExpBinaria;
	private final ExpSomaElements pExpSoma;
	private final ExpSubElements pExpSub;
	private final ExpAndElements pExpAnd;
	private final ExpOrElements pExpOr;
	private final ExpEqualsElements pExpEquals;
	private final ExpConcatElements pExpConcat;
	private final ExpressaoElements pExpressao;
	private final ComandoSimplesElements pComandoSimples;
	private final ComandoDeclaracaoElements pComandoDeclaracao;
	private final DeclaracaoElements pDeclaracao;
	private final DeclaracaoCompostaElements pDeclaracaoComposta;
	private final DeclaracaoVariavelElements pDeclaracaoVariavel;
	private final TerminalRule tVALORINTEIRO;
	private final TerminalRule tVALORBOOLEANO;
	private final TerminalRule tVALORSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Imperativa1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pComando = new ComandoElements();
		this.pSequenciaComando = new SequenciaComandoElements();
		this.pIO = new IOElements();
		this.pRead = new ReadElements();
		this.pWrite = new WriteElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pWhile = new WhileElements();
		this.pSkip = new SkipElements();
		this.pAtribuicao = new AtribuicaoElements();
		this.pPId = new PIdElements();
		this.pValor = new ValorElements();
		this.pExpMenos = new ExpMenosElements();
		this.pExpNot = new ExpNotElements();
		this.pExpLenght = new ExpLenghtElements();
		this.pExpPrimaria = new ExpPrimariaElements();
		this.pExpUnaria = new ExpUnariaElements();
		this.pExpBinaria = new ExpBinariaElements();
		this.pExpSoma = new ExpSomaElements();
		this.pExpSub = new ExpSubElements();
		this.pExpAnd = new ExpAndElements();
		this.pExpOr = new ExpOrElements();
		this.pExpEquals = new ExpEqualsElements();
		this.pExpConcat = new ExpConcatElements();
		this.pExpressao = new ExpressaoElements();
		this.pComandoSimples = new ComandoSimplesElements();
		this.pComandoDeclaracao = new ComandoDeclaracaoElements();
		this.pDeclaracao = new DeclaracaoElements();
		this.pDeclaracaoComposta = new DeclaracaoCompostaElements();
		this.pDeclaracaoVariavel = new DeclaracaoVariavelElements();
		this.tVALORINTEIRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.VALORINTEIRO");
		this.tVALORBOOLEANO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.VALORBOOLEANO");
		this.tVALORSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufpe.cin.plp.imperativa1.Imperativa1.VALORSTRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufpe.cin.plp.imperativa1.Imperativa1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	comandos+=Comando*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Comando:
	//	=> sequenciaComando=SequenciaComando | comandoSimples=ComandoSimples;
	public ComandoElements getComandoAccess() {
		return pComando;
	}
	
	public ParserRule getComandoRule() {
		return getComandoAccess().getRule();
	}
	
	//SequenciaComando:
	//	comandoSimples=ComandoSimples ';' comando=Comando;
	public SequenciaComandoElements getSequenciaComandoAccess() {
		return pSequenciaComando;
	}
	
	public ParserRule getSequenciaComandoRule() {
		return getSequenciaComandoAccess().getRule();
	}
	
	//IO:
	//	read=Read
	//	| write=Write;
	public IOElements getIOAccess() {
		return pIO;
	}
	
	public ParserRule getIORule() {
		return getIOAccess().getRule();
	}
	
	//Read:
	//	'read' '(' pid=PId ')';
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//Write:
	//	'write' '(' expressao=Expressao ')';
	public WriteElements getWriteAccess() {
		return pWrite;
	}
	
	public ParserRule getWriteRule() {
		return getWriteAccess().getRule();
	}
	
	//IfThenElse:
	//	'if' expressao=Expressao 'then' comando=Comando 'else' comando=Comando;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}
	
	//While:
	//	'while' expressao=Expressao 'do' comando=Comando;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Skip:
	//	skip='skip';
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//Atribuicao:
	//	pid=PId ':=' expressao=Expressao;
	public AtribuicaoElements getAtribuicaoAccess() {
		return pAtribuicao;
	}
	
	public ParserRule getAtribuicaoRule() {
		return getAtribuicaoAccess().getRule();
	}
	
	//PId:
	//	VALORSTRING (VALORSTRING | VALORINTEIRO)*;
	public PIdElements getPIdAccess() {
		return pPId;
	}
	
	public ParserRule getPIdRule() {
		return getPIdAccess().getRule();
	}
	
	//Valor:
	//	intType=VALORINTEIRO
	//	| stringType=VALORSTRING
	//	| boolType=VALORBOOLEANO;
	public ValorElements getValorAccess() {
		return pValor;
	}
	
	public ParserRule getValorRule() {
		return getValorAccess().getRule();
	}
	
	//ExpMenos:
	//	'-' menosExpressao=Expressao;
	public ExpMenosElements getExpMenosAccess() {
		return pExpMenos;
	}
	
	public ParserRule getExpMenosRule() {
		return getExpMenosAccess().getRule();
	}
	
	//ExpNot:
	//	'not' notExpressao=Expressao;
	public ExpNotElements getExpNotAccess() {
		return pExpNot;
	}
	
	public ParserRule getExpNotRule() {
		return getExpNotAccess().getRule();
	}
	
	//ExpLenght:
	//	'length' lengthExpressao=Expressao;
	public ExpLenghtElements getExpLenghtAccess() {
		return pExpLenght;
	}
	
	public ParserRule getExpLenghtRule() {
		return getExpLenghtAccess().getRule();
	}
	
	//ExpPrimaria:
	//	pid=PId
	//	| valor=Valor
	//	| '(' expressao=Expressao ')';
	public ExpPrimariaElements getExpPrimariaAccess() {
		return pExpPrimaria;
	}
	
	public ParserRule getExpPrimariaRule() {
		return getExpPrimariaAccess().getRule();
	}
	
	//ExpUnaria:
	//	menosExpressao=ExpMenos
	//	| notExpressao=ExpNot
	//	| lengthExpressao=ExpLenght;
	public ExpUnariaElements getExpUnariaAccess() {
		return pExpUnaria;
	}
	
	public ParserRule getExpUnariaRule() {
		return getExpUnariaAccess().getRule();
	}
	
	//ExpBinaria:
	//	somaExpressao=ExpSoma
	//	| subExpressao=ExpSub
	//	| orExpressao=ExpOr
	//	| andExpressao=ExpAnd
	//	| equalsExpressao=ExpEquals
	//	| concatExpressao=ExpConcat;
	public ExpBinariaElements getExpBinariaAccess() {
		return pExpBinaria;
	}
	
	public ParserRule getExpBinariaRule() {
		return getExpBinariaAccess().getRule();
	}
	
	//ExpSoma:
	//	valor=Valor '+' expressao=Expressao;
	public ExpSomaElements getExpSomaAccess() {
		return pExpSoma;
	}
	
	public ParserRule getExpSomaRule() {
		return getExpSomaAccess().getRule();
	}
	
	//ExpSub:
	//	valor=Valor '-' expressao=Expressao;
	public ExpSubElements getExpSubAccess() {
		return pExpSub;
	}
	
	public ParserRule getExpSubRule() {
		return getExpSubAccess().getRule();
	}
	
	//ExpAnd:
	//	valor=Valor 'and' expressao=Expressao;
	public ExpAndElements getExpAndAccess() {
		return pExpAnd;
	}
	
	public ParserRule getExpAndRule() {
		return getExpAndAccess().getRule();
	}
	
	//ExpOr:
	//	valor=Valor 'or' expressao=Expressao;
	public ExpOrElements getExpOrAccess() {
		return pExpOr;
	}
	
	public ParserRule getExpOrRule() {
		return getExpOrAccess().getRule();
	}
	
	//ExpEquals:
	//	valor=Valor '==' expressao=Expressao;
	public ExpEqualsElements getExpEqualsAccess() {
		return pExpEquals;
	}
	
	public ParserRule getExpEqualsRule() {
		return getExpEqualsAccess().getRule();
	}
	
	//ExpConcat:
	//	valor=Valor '++' expressao=Expressao;
	public ExpConcatElements getExpConcatAccess() {
		return pExpConcat;
	}
	
	public ParserRule getExpConcatRule() {
		return getExpConcatAccess().getRule();
	}
	
	//Expressao:
	//	=> expUnaria=ExpUnaria
	//	| expPrimaria=ExpPrimaria
	//	| expBinaria=ExpBinaria;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//ComandoSimples:
	//	skip=Skip
	//	| atribuicao=Atribuicao
	//	| comandoDeclaracao=ComandoDeclaracao
	//	| while=While
	//	| ifThenElse=IfThenElse
	//	| io=IO
	//	| '(' comando=Comando ')';
	public ComandoSimplesElements getComandoSimplesAccess() {
		return pComandoSimples;
	}
	
	public ParserRule getComandoSimplesRule() {
		return getComandoSimplesAccess().getRule();
	}
	
	//ComandoDeclaracao:
	//	'{' declaracao=Declaracao ';' comando=Comando '}';
	public ComandoDeclaracaoElements getComandoDeclaracaoAccess() {
		return pComandoDeclaracao;
	}
	
	public ParserRule getComandoDeclaracaoRule() {
		return getComandoDeclaracaoAccess().getRule();
	}
	
	//Declaracao:
	//	=> decComposta=DeclaracaoComposta
	//	| decVariavel=DeclaracaoVariavel
	//	| '(' declaracao=Declaracao ')';
	public DeclaracaoElements getDeclaracaoAccess() {
		return pDeclaracao;
	}
	
	public ParserRule getDeclaracaoRule() {
		return getDeclaracaoAccess().getRule();
	}
	
	//DeclaracaoComposta:
	//	decVariavel=DeclaracaoVariavel ',' declaracao=Declaracao;
	public DeclaracaoCompostaElements getDeclaracaoCompostaAccess() {
		return pDeclaracaoComposta;
	}
	
	public ParserRule getDeclaracaoCompostaRule() {
		return getDeclaracaoCompostaAccess().getRule();
	}
	
	//DeclaracaoVariavel:
	//	'var' pid=PId '=' expressao=Expressao;
	public DeclaracaoVariavelElements getDeclaracaoVariavelAccess() {
		return pDeclaracaoVariavel;
	}
	
	public ParserRule getDeclaracaoVariavelRule() {
		return getDeclaracaoVariavelAccess().getRule();
	}
	
	//terminal VALORINTEIRO:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getVALORINTEIRORule() {
		return tVALORINTEIRO;
	}
	
	//terminal VALORBOOLEANO:
	//	'true'
	//	| 'false';
	public TerminalRule getVALORBOOLEANORule() {
		return tVALORBOOLEANO;
	}
	
	//terminal VALORSTRING:
	//	'a'..'z'+;
	public TerminalRule getVALORSTRINGRule() {
		return tVALORSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
