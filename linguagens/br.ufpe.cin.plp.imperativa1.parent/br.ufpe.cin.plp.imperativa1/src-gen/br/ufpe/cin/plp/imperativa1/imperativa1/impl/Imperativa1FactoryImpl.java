/**
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.imperativa1.impl;

import br.ufpe.cin.plp.imperativa1.imperativa1.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Imperativa1FactoryImpl extends EFactoryImpl implements Imperativa1Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Imperativa1Factory init()
  {
    try
    {
      Imperativa1Factory theImperativa1Factory = (Imperativa1Factory)EPackage.Registry.INSTANCE.getEFactory(Imperativa1Package.eNS_URI);
      if (theImperativa1Factory != null)
      {
        return theImperativa1Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Imperativa1FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Imperativa1FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Imperativa1Package.MODEL: return createModel();
      case Imperativa1Package.COMANDO: return createComando();
      case Imperativa1Package.SEQUENCIA_COMANDO: return createSequenciaComando();
      case Imperativa1Package.IO: return createIO();
      case Imperativa1Package.READ: return createRead();
      case Imperativa1Package.WRITE: return createWrite();
      case Imperativa1Package.IF_THEN_ELSE: return createIfThenElse();
      case Imperativa1Package.WHILE: return createWhile();
      case Imperativa1Package.SKIP: return createSkip();
      case Imperativa1Package.ATRIBUICAO: return createAtribuicao();
      case Imperativa1Package.VALOR: return createValor();
      case Imperativa1Package.EXP_MENOS: return createExpMenos();
      case Imperativa1Package.EXP_NOT: return createExpNot();
      case Imperativa1Package.EXP_LENGHT: return createExpLenght();
      case Imperativa1Package.EXP_PRIMARIA: return createExpPrimaria();
      case Imperativa1Package.EXP_UNARIA: return createExpUnaria();
      case Imperativa1Package.EXP_BINARIA: return createExpBinaria();
      case Imperativa1Package.EXP_SOMA: return createExpSoma();
      case Imperativa1Package.EXP_SUB: return createExpSub();
      case Imperativa1Package.EXP_AND: return createExpAnd();
      case Imperativa1Package.EXP_OR: return createExpOr();
      case Imperativa1Package.EXP_EQUALS: return createExpEquals();
      case Imperativa1Package.EXP_CONCAT: return createExpConcat();
      case Imperativa1Package.EXPRESSAO: return createExpressao();
      case Imperativa1Package.COMANDO_SIMPLES: return createComandoSimples();
      case Imperativa1Package.COMANDO_DECLARACAO: return createComandoDeclaracao();
      case Imperativa1Package.DECLARACAO: return createDeclaracao();
      case Imperativa1Package.DECLARACAO_COMPOSTA: return createDeclaracaoComposta();
      case Imperativa1Package.DECLARACAO_VARIAVEL: return createDeclaracaoVariavel();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comando createComando()
  {
    ComandoImpl comando = new ComandoImpl();
    return comando;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SequenciaComando createSequenciaComando()
  {
    SequenciaComandoImpl sequenciaComando = new SequenciaComandoImpl();
    return sequenciaComando;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IO createIO()
  {
    IOImpl io = new IOImpl();
    return io;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Read createRead()
  {
    ReadImpl read = new ReadImpl();
    return read;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Write createWrite()
  {
    WriteImpl write = new WriteImpl();
    return write;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenElse createIfThenElse()
  {
    IfThenElseImpl ifThenElse = new IfThenElseImpl();
    return ifThenElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Skip createSkip()
  {
    SkipImpl skip = new SkipImpl();
    return skip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Atribuicao createAtribuicao()
  {
    AtribuicaoImpl atribuicao = new AtribuicaoImpl();
    return atribuicao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Valor createValor()
  {
    ValorImpl valor = new ValorImpl();
    return valor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpMenos createExpMenos()
  {
    ExpMenosImpl expMenos = new ExpMenosImpl();
    return expMenos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpNot createExpNot()
  {
    ExpNotImpl expNot = new ExpNotImpl();
    return expNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpLenght createExpLenght()
  {
    ExpLenghtImpl expLenght = new ExpLenghtImpl();
    return expLenght;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpPrimaria createExpPrimaria()
  {
    ExpPrimariaImpl expPrimaria = new ExpPrimariaImpl();
    return expPrimaria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpUnaria createExpUnaria()
  {
    ExpUnariaImpl expUnaria = new ExpUnariaImpl();
    return expUnaria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpBinaria createExpBinaria()
  {
    ExpBinariaImpl expBinaria = new ExpBinariaImpl();
    return expBinaria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpSoma createExpSoma()
  {
    ExpSomaImpl expSoma = new ExpSomaImpl();
    return expSoma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpSub createExpSub()
  {
    ExpSubImpl expSub = new ExpSubImpl();
    return expSub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpAnd createExpAnd()
  {
    ExpAndImpl expAnd = new ExpAndImpl();
    return expAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpOr createExpOr()
  {
    ExpOrImpl expOr = new ExpOrImpl();
    return expOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpEquals createExpEquals()
  {
    ExpEqualsImpl expEquals = new ExpEqualsImpl();
    return expEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpConcat createExpConcat()
  {
    ExpConcatImpl expConcat = new ExpConcatImpl();
    return expConcat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expressao createExpressao()
  {
    ExpressaoImpl expressao = new ExpressaoImpl();
    return expressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComandoSimples createComandoSimples()
  {
    ComandoSimplesImpl comandoSimples = new ComandoSimplesImpl();
    return comandoSimples;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComandoDeclaracao createComandoDeclaracao()
  {
    ComandoDeclaracaoImpl comandoDeclaracao = new ComandoDeclaracaoImpl();
    return comandoDeclaracao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaracao createDeclaracao()
  {
    DeclaracaoImpl declaracao = new DeclaracaoImpl();
    return declaracao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaracaoComposta createDeclaracaoComposta()
  {
    DeclaracaoCompostaImpl declaracaoComposta = new DeclaracaoCompostaImpl();
    return declaracaoComposta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaracaoVariavel createDeclaracaoVariavel()
  {
    DeclaracaoVariavelImpl declaracaoVariavel = new DeclaracaoVariavelImpl();
    return declaracaoVariavel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Imperativa1Package getImperativa1Package()
  {
    return (Imperativa1Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Imperativa1Package getPackage()
  {
    return Imperativa1Package.eINSTANCE;
  }

} //Imperativa1FactoryImpl
