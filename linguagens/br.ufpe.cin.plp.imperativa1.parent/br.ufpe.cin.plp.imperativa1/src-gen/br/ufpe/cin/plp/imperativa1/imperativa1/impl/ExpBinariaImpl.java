/**
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.imperativa1.impl;

import br.ufpe.cin.plp.imperativa1.imperativa1.ExpAnd;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpBinaria;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpConcat;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpEquals;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpOr;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpSoma;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpSub;
import br.ufpe.cin.plp.imperativa1.imperativa1.Imperativa1Package;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exp Binaria</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getSomaExpressao <em>Soma Expressao</em>}</li>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getSubExpressao <em>Sub Expressao</em>}</li>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getOrExpressao <em>Or Expressao</em>}</li>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getAndExpressao <em>And Expressao</em>}</li>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getEqualsExpressao <em>Equals Expressao</em>}</li>
 *   <li>{@link br.ufpe.cin.plp.imperativa1.imperativa1.impl.ExpBinariaImpl#getConcatExpressao <em>Concat Expressao</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpBinariaImpl extends MinimalEObjectImpl.Container implements ExpBinaria
{
  /**
   * The cached value of the '{@link #getSomaExpressao() <em>Soma Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSomaExpressao()
   * @generated
   * @ordered
   */
  protected ExpSoma somaExpressao;

  /**
   * The cached value of the '{@link #getSubExpressao() <em>Sub Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubExpressao()
   * @generated
   * @ordered
   */
  protected ExpSub subExpressao;

  /**
   * The cached value of the '{@link #getOrExpressao() <em>Or Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrExpressao()
   * @generated
   * @ordered
   */
  protected ExpOr orExpressao;

  /**
   * The cached value of the '{@link #getAndExpressao() <em>And Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAndExpressao()
   * @generated
   * @ordered
   */
  protected ExpAnd andExpressao;

  /**
   * The cached value of the '{@link #getEqualsExpressao() <em>Equals Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEqualsExpressao()
   * @generated
   * @ordered
   */
  protected ExpEquals equalsExpressao;

  /**
   * The cached value of the '{@link #getConcatExpressao() <em>Concat Expressao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcatExpressao()
   * @generated
   * @ordered
   */
  protected ExpConcat concatExpressao;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpBinariaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Imperativa1Package.Literals.EXP_BINARIA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpSoma getSomaExpressao()
  {
    return somaExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSomaExpressao(ExpSoma newSomaExpressao, NotificationChain msgs)
  {
    ExpSoma oldSomaExpressao = somaExpressao;
    somaExpressao = newSomaExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO, oldSomaExpressao, newSomaExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSomaExpressao(ExpSoma newSomaExpressao)
  {
    if (newSomaExpressao != somaExpressao)
    {
      NotificationChain msgs = null;
      if (somaExpressao != null)
        msgs = ((InternalEObject)somaExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO, null, msgs);
      if (newSomaExpressao != null)
        msgs = ((InternalEObject)newSomaExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO, null, msgs);
      msgs = basicSetSomaExpressao(newSomaExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO, newSomaExpressao, newSomaExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpSub getSubExpressao()
  {
    return subExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubExpressao(ExpSub newSubExpressao, NotificationChain msgs)
  {
    ExpSub oldSubExpressao = subExpressao;
    subExpressao = newSubExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO, oldSubExpressao, newSubExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubExpressao(ExpSub newSubExpressao)
  {
    if (newSubExpressao != subExpressao)
    {
      NotificationChain msgs = null;
      if (subExpressao != null)
        msgs = ((InternalEObject)subExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO, null, msgs);
      if (newSubExpressao != null)
        msgs = ((InternalEObject)newSubExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO, null, msgs);
      msgs = basicSetSubExpressao(newSubExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO, newSubExpressao, newSubExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpOr getOrExpressao()
  {
    return orExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrExpressao(ExpOr newOrExpressao, NotificationChain msgs)
  {
    ExpOr oldOrExpressao = orExpressao;
    orExpressao = newOrExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO, oldOrExpressao, newOrExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrExpressao(ExpOr newOrExpressao)
  {
    if (newOrExpressao != orExpressao)
    {
      NotificationChain msgs = null;
      if (orExpressao != null)
        msgs = ((InternalEObject)orExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO, null, msgs);
      if (newOrExpressao != null)
        msgs = ((InternalEObject)newOrExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO, null, msgs);
      msgs = basicSetOrExpressao(newOrExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO, newOrExpressao, newOrExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpAnd getAndExpressao()
  {
    return andExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAndExpressao(ExpAnd newAndExpressao, NotificationChain msgs)
  {
    ExpAnd oldAndExpressao = andExpressao;
    andExpressao = newAndExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO, oldAndExpressao, newAndExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAndExpressao(ExpAnd newAndExpressao)
  {
    if (newAndExpressao != andExpressao)
    {
      NotificationChain msgs = null;
      if (andExpressao != null)
        msgs = ((InternalEObject)andExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO, null, msgs);
      if (newAndExpressao != null)
        msgs = ((InternalEObject)newAndExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO, null, msgs);
      msgs = basicSetAndExpressao(newAndExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO, newAndExpressao, newAndExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpEquals getEqualsExpressao()
  {
    return equalsExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEqualsExpressao(ExpEquals newEqualsExpressao, NotificationChain msgs)
  {
    ExpEquals oldEqualsExpressao = equalsExpressao;
    equalsExpressao = newEqualsExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO, oldEqualsExpressao, newEqualsExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEqualsExpressao(ExpEquals newEqualsExpressao)
  {
    if (newEqualsExpressao != equalsExpressao)
    {
      NotificationChain msgs = null;
      if (equalsExpressao != null)
        msgs = ((InternalEObject)equalsExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO, null, msgs);
      if (newEqualsExpressao != null)
        msgs = ((InternalEObject)newEqualsExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO, null, msgs);
      msgs = basicSetEqualsExpressao(newEqualsExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO, newEqualsExpressao, newEqualsExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpConcat getConcatExpressao()
  {
    return concatExpressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcatExpressao(ExpConcat newConcatExpressao, NotificationChain msgs)
  {
    ExpConcat oldConcatExpressao = concatExpressao;
    concatExpressao = newConcatExpressao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO, oldConcatExpressao, newConcatExpressao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConcatExpressao(ExpConcat newConcatExpressao)
  {
    if (newConcatExpressao != concatExpressao)
    {
      NotificationChain msgs = null;
      if (concatExpressao != null)
        msgs = ((InternalEObject)concatExpressao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO, null, msgs);
      if (newConcatExpressao != null)
        msgs = ((InternalEObject)newConcatExpressao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO, null, msgs);
      msgs = basicSetConcatExpressao(newConcatExpressao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO, newConcatExpressao, newConcatExpressao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO:
        return basicSetSomaExpressao(null, msgs);
      case Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO:
        return basicSetSubExpressao(null, msgs);
      case Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO:
        return basicSetOrExpressao(null, msgs);
      case Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO:
        return basicSetAndExpressao(null, msgs);
      case Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO:
        return basicSetEqualsExpressao(null, msgs);
      case Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO:
        return basicSetConcatExpressao(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO:
        return getSomaExpressao();
      case Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO:
        return getSubExpressao();
      case Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO:
        return getOrExpressao();
      case Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO:
        return getAndExpressao();
      case Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO:
        return getEqualsExpressao();
      case Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO:
        return getConcatExpressao();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO:
        setSomaExpressao((ExpSoma)newValue);
        return;
      case Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO:
        setSubExpressao((ExpSub)newValue);
        return;
      case Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO:
        setOrExpressao((ExpOr)newValue);
        return;
      case Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO:
        setAndExpressao((ExpAnd)newValue);
        return;
      case Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO:
        setEqualsExpressao((ExpEquals)newValue);
        return;
      case Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO:
        setConcatExpressao((ExpConcat)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO:
        setSomaExpressao((ExpSoma)null);
        return;
      case Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO:
        setSubExpressao((ExpSub)null);
        return;
      case Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO:
        setOrExpressao((ExpOr)null);
        return;
      case Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO:
        setAndExpressao((ExpAnd)null);
        return;
      case Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO:
        setEqualsExpressao((ExpEquals)null);
        return;
      case Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO:
        setConcatExpressao((ExpConcat)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Imperativa1Package.EXP_BINARIA__SOMA_EXPRESSAO:
        return somaExpressao != null;
      case Imperativa1Package.EXP_BINARIA__SUB_EXPRESSAO:
        return subExpressao != null;
      case Imperativa1Package.EXP_BINARIA__OR_EXPRESSAO:
        return orExpressao != null;
      case Imperativa1Package.EXP_BINARIA__AND_EXPRESSAO:
        return andExpressao != null;
      case Imperativa1Package.EXP_BINARIA__EQUALS_EXPRESSAO:
        return equalsExpressao != null;
      case Imperativa1Package.EXP_BINARIA__CONCAT_EXPRESSAO:
        return concatExpressao != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpBinariaImpl
