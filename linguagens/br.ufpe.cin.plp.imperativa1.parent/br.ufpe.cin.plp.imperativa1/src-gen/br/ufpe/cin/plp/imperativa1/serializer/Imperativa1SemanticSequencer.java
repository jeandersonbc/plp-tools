/*
 * generated by Xtext 2.9.2
 */
package br.ufpe.cin.plp.imperativa1.serializer;

import br.ufpe.cin.plp.imperativa1.imperativa1.Atribuicao;
import br.ufpe.cin.plp.imperativa1.imperativa1.Comando;
import br.ufpe.cin.plp.imperativa1.imperativa1.ComandoDeclaracao;
import br.ufpe.cin.plp.imperativa1.imperativa1.ComandoSimples;
import br.ufpe.cin.plp.imperativa1.imperativa1.Declaracao;
import br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoComposta;
import br.ufpe.cin.plp.imperativa1.imperativa1.DeclaracaoVariavel;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpAnd;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpBinaria;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpConcat;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpEquals;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpLenght;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpMenos;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpNot;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpOr;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpPrimaria;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpSoma;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpSub;
import br.ufpe.cin.plp.imperativa1.imperativa1.ExpUnaria;
import br.ufpe.cin.plp.imperativa1.imperativa1.Expressao;
import br.ufpe.cin.plp.imperativa1.imperativa1.IO;
import br.ufpe.cin.plp.imperativa1.imperativa1.IfThenElse;
import br.ufpe.cin.plp.imperativa1.imperativa1.Imperativa1Package;
import br.ufpe.cin.plp.imperativa1.imperativa1.Model;
import br.ufpe.cin.plp.imperativa1.imperativa1.Read;
import br.ufpe.cin.plp.imperativa1.imperativa1.SequenciaComando;
import br.ufpe.cin.plp.imperativa1.imperativa1.Skip;
import br.ufpe.cin.plp.imperativa1.imperativa1.Valor;
import br.ufpe.cin.plp.imperativa1.imperativa1.While;
import br.ufpe.cin.plp.imperativa1.imperativa1.Write;
import br.ufpe.cin.plp.imperativa1.services.Imperativa1GrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Imperativa1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Imperativa1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Imperativa1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Imperativa1Package.ATRIBUICAO:
				sequence_Atribuicao(context, (Atribuicao) semanticObject); 
				return; 
			case Imperativa1Package.COMANDO:
				sequence_Comando(context, (Comando) semanticObject); 
				return; 
			case Imperativa1Package.COMANDO_DECLARACAO:
				sequence_ComandoDeclaracao(context, (ComandoDeclaracao) semanticObject); 
				return; 
			case Imperativa1Package.COMANDO_SIMPLES:
				sequence_ComandoSimples(context, (ComandoSimples) semanticObject); 
				return; 
			case Imperativa1Package.DECLARACAO:
				sequence_Declaracao(context, (Declaracao) semanticObject); 
				return; 
			case Imperativa1Package.DECLARACAO_COMPOSTA:
				sequence_DeclaracaoComposta(context, (DeclaracaoComposta) semanticObject); 
				return; 
			case Imperativa1Package.DECLARACAO_VARIAVEL:
				sequence_DeclaracaoVariavel(context, (DeclaracaoVariavel) semanticObject); 
				return; 
			case Imperativa1Package.EXP_AND:
				sequence_ExpAnd(context, (ExpAnd) semanticObject); 
				return; 
			case Imperativa1Package.EXP_BINARIA:
				sequence_ExpBinaria(context, (ExpBinaria) semanticObject); 
				return; 
			case Imperativa1Package.EXP_CONCAT:
				sequence_ExpConcat(context, (ExpConcat) semanticObject); 
				return; 
			case Imperativa1Package.EXP_EQUALS:
				sequence_ExpEquals(context, (ExpEquals) semanticObject); 
				return; 
			case Imperativa1Package.EXP_LENGHT:
				sequence_ExpLenght(context, (ExpLenght) semanticObject); 
				return; 
			case Imperativa1Package.EXP_MENOS:
				sequence_ExpMenos(context, (ExpMenos) semanticObject); 
				return; 
			case Imperativa1Package.EXP_NOT:
				sequence_ExpNot(context, (ExpNot) semanticObject); 
				return; 
			case Imperativa1Package.EXP_OR:
				sequence_ExpOr(context, (ExpOr) semanticObject); 
				return; 
			case Imperativa1Package.EXP_PRIMARIA:
				sequence_ExpPrimaria(context, (ExpPrimaria) semanticObject); 
				return; 
			case Imperativa1Package.EXP_SOMA:
				sequence_ExpSoma(context, (ExpSoma) semanticObject); 
				return; 
			case Imperativa1Package.EXP_SUB:
				sequence_ExpSub(context, (ExpSub) semanticObject); 
				return; 
			case Imperativa1Package.EXP_UNARIA:
				sequence_ExpUnaria(context, (ExpUnaria) semanticObject); 
				return; 
			case Imperativa1Package.EXPRESSAO:
				sequence_Expressao(context, (Expressao) semanticObject); 
				return; 
			case Imperativa1Package.IO:
				sequence_IO(context, (IO) semanticObject); 
				return; 
			case Imperativa1Package.IF_THEN_ELSE:
				sequence_IfThenElse(context, (IfThenElse) semanticObject); 
				return; 
			case Imperativa1Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Imperativa1Package.READ:
				sequence_Read(context, (Read) semanticObject); 
				return; 
			case Imperativa1Package.SEQUENCIA_COMANDO:
				sequence_SequenciaComando(context, (SequenciaComando) semanticObject); 
				return; 
			case Imperativa1Package.SKIP:
				sequence_Skip(context, (Skip) semanticObject); 
				return; 
			case Imperativa1Package.VALOR:
				sequence_Valor(context, (Valor) semanticObject); 
				return; 
			case Imperativa1Package.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			case Imperativa1Package.WRITE:
				sequence_Write(context, (Write) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atribuicao returns Atribuicao
	 *
	 * Constraint:
	 *     (pid=PId expressao=Expressao)
	 */
	protected void sequence_Atribuicao(ISerializationContext context, Atribuicao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.ATRIBUICAO__PID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.ATRIBUICAO__PID));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.ATRIBUICAO__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.ATRIBUICAO__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtribuicaoAccess().getPidPIdParserRuleCall_0_0(), semanticObject.getPid());
		feeder.accept(grammarAccess.getAtribuicaoAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComandoDeclaracao returns ComandoDeclaracao
	 *
	 * Constraint:
	 *     (declaracao=Declaracao comando=Comando)
	 */
	protected void sequence_ComandoDeclaracao(ISerializationContext context, ComandoDeclaracao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.COMANDO_DECLARACAO__DECLARACAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.COMANDO_DECLARACAO__DECLARACAO));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.COMANDO_DECLARACAO__COMANDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.COMANDO_DECLARACAO__COMANDO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoDeclaracaoAccess().getDeclaracaoDeclaracaoParserRuleCall_1_0(), semanticObject.getDeclaracao());
		feeder.accept(grammarAccess.getComandoDeclaracaoAccess().getComandoComandoParserRuleCall_3_0(), semanticObject.getComando());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComandoSimples returns ComandoSimples
	 *
	 * Constraint:
	 *     (
	 *         skip=Skip | 
	 *         atribuicao=Atribuicao | 
	 *         comandoDeclaracao=ComandoDeclaracao | 
	 *         while=While | 
	 *         ifThenElse=IfThenElse | 
	 *         io=IO | 
	 *         comando=Comando
	 *     )
	 */
	protected void sequence_ComandoSimples(ISerializationContext context, ComandoSimples semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comando returns Comando
	 *
	 * Constraint:
	 *     (sequenciaComando=SequenciaComando | comandoSimples=ComandoSimples)
	 */
	protected void sequence_Comando(ISerializationContext context, Comando semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclaracaoComposta returns DeclaracaoComposta
	 *
	 * Constraint:
	 *     (decVariavel=DeclaracaoVariavel declaracao=Declaracao)
	 */
	protected void sequence_DeclaracaoComposta(ISerializationContext context, DeclaracaoComposta semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.DECLARACAO_COMPOSTA__DEC_VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.DECLARACAO_COMPOSTA__DEC_VARIAVEL));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.DECLARACAO_COMPOSTA__DECLARACAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.DECLARACAO_COMPOSTA__DECLARACAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaracaoCompostaAccess().getDecVariavelDeclaracaoVariavelParserRuleCall_0_0(), semanticObject.getDecVariavel());
		feeder.accept(grammarAccess.getDeclaracaoCompostaAccess().getDeclaracaoDeclaracaoParserRuleCall_2_0(), semanticObject.getDeclaracao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeclaracaoVariavel returns DeclaracaoVariavel
	 *
	 * Constraint:
	 *     (pid=PId expressao=Expressao)
	 */
	protected void sequence_DeclaracaoVariavel(ISerializationContext context, DeclaracaoVariavel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.DECLARACAO_VARIAVEL__PID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.DECLARACAO_VARIAVEL__PID));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.DECLARACAO_VARIAVEL__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.DECLARACAO_VARIAVEL__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaracaoVariavelAccess().getPidPIdParserRuleCall_1_0(), semanticObject.getPid());
		feeder.accept(grammarAccess.getDeclaracaoVariavelAccess().getExpressaoExpressaoParserRuleCall_3_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaracao returns Declaracao
	 *
	 * Constraint:
	 *     (decComposta=DeclaracaoComposta | decVariavel=DeclaracaoVariavel | declaracao=Declaracao)
	 */
	protected void sequence_Declaracao(ISerializationContext context, Declaracao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpAnd returns ExpAnd
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpAnd(ISerializationContext context, ExpAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_AND__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_AND__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_AND__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_AND__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAndAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpAndAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpBinaria returns ExpBinaria
	 *
	 * Constraint:
	 *     (
	 *         somaExpressao=ExpSoma | 
	 *         subExpressao=ExpSub | 
	 *         orExpressao=ExpOr | 
	 *         andExpressao=ExpAnd | 
	 *         equalsExpressao=ExpEquals | 
	 *         concatExpressao=ExpConcat
	 *     )
	 */
	protected void sequence_ExpBinaria(ISerializationContext context, ExpBinaria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpConcat returns ExpConcat
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpConcat(ISerializationContext context, ExpConcat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_CONCAT__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_CONCAT__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_CONCAT__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_CONCAT__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpConcatAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpConcatAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpEquals returns ExpEquals
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpEquals(ISerializationContext context, ExpEquals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_EQUALS__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_EQUALS__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_EQUALS__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_EQUALS__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpEqualsAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpEqualsAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpLenght returns ExpLenght
	 *
	 * Constraint:
	 *     lengthExpressao=Expressao
	 */
	protected void sequence_ExpLenght(ISerializationContext context, ExpLenght semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_LENGHT__LENGTH_EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_LENGHT__LENGTH_EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpLenghtAccess().getLengthExpressaoExpressaoParserRuleCall_1_0(), semanticObject.getLengthExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpMenos returns ExpMenos
	 *
	 * Constraint:
	 *     menosExpressao=Expressao
	 */
	protected void sequence_ExpMenos(ISerializationContext context, ExpMenos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_MENOS__MENOS_EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_MENOS__MENOS_EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpMenosAccess().getMenosExpressaoExpressaoParserRuleCall_1_0(), semanticObject.getMenosExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpNot returns ExpNot
	 *
	 * Constraint:
	 *     notExpressao=Expressao
	 */
	protected void sequence_ExpNot(ISerializationContext context, ExpNot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_NOT__NOT_EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_NOT__NOT_EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpNotAccess().getNotExpressaoExpressaoParserRuleCall_1_0(), semanticObject.getNotExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpOr returns ExpOr
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpOr(ISerializationContext context, ExpOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_OR__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_OR__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_OR__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_OR__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpOrAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpOrAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpPrimaria returns ExpPrimaria
	 *
	 * Constraint:
	 *     (pid=PId | valor=Valor | expressao=Expressao)
	 */
	protected void sequence_ExpPrimaria(ISerializationContext context, ExpPrimaria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpSoma returns ExpSoma
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpSoma(ISerializationContext context, ExpSoma semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_SOMA__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_SOMA__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_SOMA__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_SOMA__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpSomaAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpSomaAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpSub returns ExpSub
	 *
	 * Constraint:
	 *     (valor=Valor expressao=Expressao)
	 */
	protected void sequence_ExpSub(ISerializationContext context, ExpSub semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_SUB__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_SUB__VALOR));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.EXP_SUB__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.EXP_SUB__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpSubAccess().getValorValorParserRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getExpSubAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpUnaria returns ExpUnaria
	 *
	 * Constraint:
	 *     (menosExpressao=ExpMenos | notExpressao=ExpNot | lengthExpressao=ExpLenght)
	 */
	protected void sequence_ExpUnaria(ISerializationContext context, ExpUnaria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expressao returns Expressao
	 *
	 * Constraint:
	 *     (expUnaria=ExpUnaria | expPrimaria=ExpPrimaria | expBinaria=ExpBinaria)
	 */
	protected void sequence_Expressao(ISerializationContext context, Expressao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IO returns IO
	 *
	 * Constraint:
	 *     (read=Read | write=Write)
	 */
	protected void sequence_IO(ISerializationContext context, IO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfThenElse returns IfThenElse
	 *
	 * Constraint:
	 *     (expressao=Expressao comando=Comando comando=Comando)
	 */
	protected void sequence_IfThenElse(ISerializationContext context, IfThenElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     comandos+=Comando+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Read returns Read
	 *
	 * Constraint:
	 *     pid=PId
	 */
	protected void sequence_Read(ISerializationContext context, Read semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.READ__PID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.READ__PID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadAccess().getPidPIdParserRuleCall_2_0(), semanticObject.getPid());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SequenciaComando returns SequenciaComando
	 *
	 * Constraint:
	 *     (comandoSimples=ComandoSimples comando=Comando)
	 */
	protected void sequence_SequenciaComando(ISerializationContext context, SequenciaComando semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.SEQUENCIA_COMANDO__COMANDO_SIMPLES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.SEQUENCIA_COMANDO__COMANDO_SIMPLES));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.SEQUENCIA_COMANDO__COMANDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.SEQUENCIA_COMANDO__COMANDO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSequenciaComandoAccess().getComandoSimplesComandoSimplesParserRuleCall_0_0(), semanticObject.getComandoSimples());
		feeder.accept(grammarAccess.getSequenciaComandoAccess().getComandoComandoParserRuleCall_2_0(), semanticObject.getComando());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Skip returns Skip
	 *
	 * Constraint:
	 *     skip='skip'
	 */
	protected void sequence_Skip(ISerializationContext context, Skip semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.SKIP__SKIP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.SKIP__SKIP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSkipAccess().getSkipSkipKeyword_0(), semanticObject.getSkip());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Valor returns Valor
	 *
	 * Constraint:
	 *     (intType=VALORINTEIRO | stringType=VALORSTRING | boolType=VALORBOOLEANO)
	 */
	protected void sequence_Valor(ISerializationContext context, Valor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     While returns While
	 *
	 * Constraint:
	 *     (expressao=Expressao comando=Comando)
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.WHILE__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.WHILE__EXPRESSAO));
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.WHILE__COMANDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.WHILE__COMANDO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhileAccess().getExpressaoExpressaoParserRuleCall_1_0(), semanticObject.getExpressao());
		feeder.accept(grammarAccess.getWhileAccess().getComandoComandoParserRuleCall_3_0(), semanticObject.getComando());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Write returns Write
	 *
	 * Constraint:
	 *     expressao=Expressao
	 */
	protected void sequence_Write(ISerializationContext context, Write semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Imperativa1Package.Literals.WRITE__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Imperativa1Package.Literals.WRITE__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteAccess().getExpressaoExpressaoParserRuleCall_2_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
}
